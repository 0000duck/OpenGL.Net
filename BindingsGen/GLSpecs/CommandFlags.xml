<?xml version="1.0" encoding="utf-8" ?>
<command_overrides>
	
	<!-- GL - Missing enumerants -->
	
	<enumerant name="^ErrorCode">
		<add_enum_value value="Wgl.ERROR_INVALID_PIXEL_TYPE_ARB">GL_ERROR_INVALID_PIXEL_TYPE_ARB</add_enum_value>
		<add_enum_value value="Wgl.ERROR_INVALID_PROFILE_ARB">GL_ERROR_INVALID_PROFILE_ARB</add_enum_value>
		<add_enum_value value="Wgl.ERROR_INVALID_VERSION_ARB">GL_ERROR_INVALID_VERSION_ARB</add_enum_value>
		<add_enum_value value="Wgl.ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB">GL_ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB</add_enum_value>
	</enumerant>
	
	<enumerant name="^PixelFormat$">
		<add_enum>GL_BGR</add_enum>
		<add_enum>GL_BGRA</add_enum>
		<add_enum>GL_RG</add_enum>
		<add_enum>GL_DEPTH_STENCIL</add_enum>
		<add_enum>GL_RED_INTEGER</add_enum>
		<add_enum>GL_RG_INTEGER</add_enum>
		<add_enum>GL_RGB_INTEGER</add_enum>
		<add_enum>GL_RGBA_INTEGER</add_enum>
	</enumerant>
	
	<enumerant name="^PixelType$">
		<add_enum>GL_DOUBLE</add_enum>
		<add_enum>GL_HALF_FLOAT</add_enum>
		<add_enum>GL_UNSIGNED_BYTE_2_3_3_REV</add_enum>
		<add_enum>GL_UNSIGNED_SHORT_5_6_5</add_enum>
		<add_enum>GL_UNSIGNED_SHORT_1_5_5_5_REV</add_enum>
		<add_enum>GL_UNSIGNED_SHORT_5_6_5_REV</add_enum>
		<add_enum>GL_UNSIGNED_INT_8_8_8_8</add_enum>
		<add_enum>GL_UNSIGNED_INT_10_10_10_2</add_enum>
		<add_enum>GL_UNSIGNED_INT_2_10_10_10_REV</add_enum>
	</enumerant>

	<enumerant name="^TextureTarget$">
		<add_enum>GL_TEXTURE_RECTANGLE</add_enum>
		<add_enum>GL_TEXTURE_CUBE_MAP</add_enum>
	</enumerant>
	
	<!-- GL - Special Cases -->

	<command name="^gl(Vertex(Attrib)?|(Secondary)?Color|Index|Normal|(Fog|Tex|MultiTex|Eval)Coord|EvalPoint|ArrayElement|Material|EdgeFlag|CallList(s)?)[1-4]?N?u?(b|s|i|f|d)?$">
		<!-- Commands allowed between glBegin and glEnd cannot be checked for errors -->
		<flags>NoGetError</flags>
	</command>
	
	<command name="(e)?glGetError$">
		<!-- Avoid stack overflow -->
		<flags>NoGetError</flags>
	</command>
	
	<!-- glGet* commands (even indexed) -->
	<command name="^glGet((Integer(64)?|Float|Double|Boolean)(v|i_v))$">
		<rename>Get</rename>
		<!-- Generate "out" overloads -->
		<flags>OutParam ForcePlainParams</flags>
	</command>

	<!-- GL - Out Parameter -->

	<command name="^glGet(Query(Object)?|Shader|Program|VertexAttrib)iv$">
		<!-- Generate "out" overloads -->
		<flags>OutParam</flags>
	</command>

	<command name="^glGet(QueryObject)uiv$">
		<!-- Generate "out" overloads -->
		<flags>OutParam</flags>
	</command>

	<command name="^glGet(ShaderPrecisionFormat|BufferParameteriv(ARB)?)$">
		<!-- Generate "out" overloads -->
		<flags>OutParam</flags>
	</command>
	
	<command name="(gl\w+TexImage(1-4)|glBufferData)">
		<!-- Let the application handles the *TexImage* and glBufferData errors (proxy texture targets, out of memory) -->
		<flags>NoGetError ForcePlainParams</flags>
	</command>
	
	<!-- GL - Variadic Commands -->

	<command name="^gl(Feedback|Select)Buffer$">
		<flags>VariadicParams</flags>
	</command>

	<command name="^glPrioritize(Textures)$">
		<flags>VariadicParams</flags>
	</command>

	<command name="^glBind(Textures|Samplers|ImageTextures|VertexBuffers|PerfMonitorsAMD)$">
		<flags>VariadicParams</flags>
	</command>

	<command name="^glDelete(Buffers|Queries|Textures|Renderbuffers|Framebuffers|VertexArrays|Samplers|TransformFeedback|ProgramPipelines)(ARB|EXT)?$">
		<flags>VariadicParams</flags>
	</command>

	<command name="^glDelete(Fences)APPLE$">
		<flags>VariadicParams</flags>
	</command>

	<command name="^glDelete(Name|PerfMonitors)AMD$">
		<flags>VariadicParams</flags>
	</command>

	<command name="^glDelete(Fences|OcclusionQueries)NV$">
		<flags>VariadicParams</flags>
	</command>

	<command name="^gl(DrawBuffers|UniformSubroutines|CreateShaderProgramv|InvalidateFramebuffer)$">
		<flags>VariadicParams</flags>
	</command>
	
	<!-- WGL -->
	
	<command name="wglMakeCurrent">
		<!-- Overrides implementation name since it's manually implemented in Wgl.cs -->
		<rename>MakeCurrentCore</rename>
		<visibility>private</visibility>
		<!-- WGL commands errors won't be automatically checked by bindings -->
		<flags>NoGetError</flags>
	</command>
	
	<command name="wgl.+|glX.+">
		<!-- WGL commands errors won't be automatically checked by bindings -->
		<flags>NoGetError</flags>
	</command>
	
	<command name="ChoosePixelFormat|DescribePixelFormat|GetEnhMetaFilePixelFormat|GetPixelFormat|SetPixelFormat|SwapBuffers">
		<!-- GDI functions are implemented manually -->
		<flags>Disable</flags>
	</command>
</command_overrides>