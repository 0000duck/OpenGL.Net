
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_PIXEL_COUNTER_BITS_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public const int PIXEL_COUNTER_BITS_NV = 0x8864;

		/// <summary>
		/// [GL] Value of GL_CURRENT_OCCLUSION_QUERY_ID_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public const int CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;

		/// <summary>
		/// [GL] Value of GL_PIXEL_COUNT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public const int PIXEL_COUNT_NV = 0x8866;

		/// <summary>
		/// [GL] Value of GL_PIXEL_COUNT_AVAILABLE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public const int PIXEL_COUNT_AVAILABLE_NV = 0x8867;

		/// <summary>
		/// [GL] glGenOcclusionQueriesNV: Binding for glGenOcclusionQueriesNV.
		/// </summary>
		/// <param name="ids">
		/// A <see cref="T:UInt32[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static void GenOcclusionQueriesNV(UInt32[] ids)
		{
			unsafe {
				fixed (UInt32* p_ids = ids)
				{
					Debug.Assert(Delegates.pglGenOcclusionQueriesNV != null, "pglGenOcclusionQueriesNV not implemented");
					Delegates.pglGenOcclusionQueriesNV((Int32)ids.Length, p_ids);
					LogCommand("glGenOcclusionQueriesNV", null, ids.Length, ids					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGenOcclusionQueriesNV: Binding for glGenOcclusionQueriesNV.
		/// </summary>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static UInt32 GenOcclusionQueriesNV()
		{
			UInt32[] retValue = new UInt32[1];
			GenOcclusionQueriesNV(retValue);
			return (retValue[0]);
		}

		/// <summary>
		/// [GL] glDeleteOcclusionQueriesNV: Binding for glDeleteOcclusionQueriesNV.
		/// </summary>
		/// <param name="ids">
		/// A <see cref="T:UInt32[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static void DeleteOcclusionQueriesNV(params UInt32[] ids)
		{
			unsafe {
				fixed (UInt32* p_ids = ids)
				{
					Debug.Assert(Delegates.pglDeleteOcclusionQueriesNV != null, "pglDeleteOcclusionQueriesNV not implemented");
					Delegates.pglDeleteOcclusionQueriesNV((Int32)ids.Length, p_ids);
					LogCommand("glDeleteOcclusionQueriesNV", null, ids.Length, ids					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glIsOcclusionQueryNV: Binding for glIsOcclusionQueryNV.
		/// </summary>
		/// <param name="id">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static bool IsOcclusionQueryNV(UInt32 id)
		{
			bool retValue;

			Debug.Assert(Delegates.pglIsOcclusionQueryNV != null, "pglIsOcclusionQueryNV not implemented");
			retValue = Delegates.pglIsOcclusionQueryNV(id);
			LogCommand("glIsOcclusionQueryNV", retValue, id			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		/// <summary>
		/// [GL] glBeginOcclusionQueryNV: Binding for glBeginOcclusionQueryNV.
		/// </summary>
		/// <param name="id">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static void BeginOcclusionQueryNV(UInt32 id)
		{
			Debug.Assert(Delegates.pglBeginOcclusionQueryNV != null, "pglBeginOcclusionQueryNV not implemented");
			Delegates.pglBeginOcclusionQueryNV(id);
			LogCommand("glBeginOcclusionQueryNV", null, id			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glEndOcclusionQueryNV: Binding for glEndOcclusionQueryNV.
		/// </summary>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static void EndOcclusionQueryNV()
		{
			Debug.Assert(Delegates.pglEndOcclusionQueryNV != null, "pglEndOcclusionQueryNV not implemented");
			Delegates.pglEndOcclusionQueryNV();
			LogCommand("glEndOcclusionQueryNV", null			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetOcclusionQueryivNV: Binding for glGetOcclusionQueryivNV.
		/// </summary>
		/// <param name="id">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static void GetOcclusionQueryNV(UInt32 id, Int32 pname, [Out] Int32[] @params)
		{
			unsafe {
				fixed (Int32* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetOcclusionQueryivNV != null, "pglGetOcclusionQueryivNV not implemented");
					Delegates.pglGetOcclusionQueryivNV(id, pname, p_params);
					LogCommand("glGetOcclusionQueryivNV", null, id, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glGetOcclusionQueryuivNV: Binding for glGetOcclusionQueryuivNV.
		/// </summary>
		/// <param name="id">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="pname">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="params">
		/// A <see cref="T:UInt32[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_occlusion_query")]
		public static void GetOcclusionQueryuivNV(UInt32 id, Int32 pname, [Out] UInt32[] @params)
		{
			unsafe {
				fixed (UInt32* p_params = @params)
				{
					Debug.Assert(Delegates.pglGetOcclusionQueryuivNV != null, "pglGetOcclusionQueryuivNV not implemented");
					Delegates.pglGetOcclusionQueryuivNV(id, pname, p_params);
					LogCommand("glGetOcclusionQueryuivNV", null, id, pname, @params					);
				}
			}
			DebugCheckErrors(null);
		}

		internal unsafe static partial class Delegates
		{
			[RequiredByFeature("GL_NV_occlusion_query")]
			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate void glGenOcclusionQueriesNV(Int32 n, UInt32* ids);

			[RequiredByFeature("GL_NV_occlusion_query")]
			[ThreadStatic]
			internal static glGenOcclusionQueriesNV pglGenOcclusionQueriesNV;

			[RequiredByFeature("GL_NV_occlusion_query")]
			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate void glDeleteOcclusionQueriesNV(Int32 n, UInt32* ids);

			[RequiredByFeature("GL_NV_occlusion_query")]
			[ThreadStatic]
			internal static glDeleteOcclusionQueriesNV pglDeleteOcclusionQueriesNV;

			[RequiredByFeature("GL_NV_occlusion_query")]
			[SuppressUnmanagedCodeSecurity()]
			internal delegate bool glIsOcclusionQueryNV(UInt32 id);

			[RequiredByFeature("GL_NV_occlusion_query")]
			[ThreadStatic]
			internal static glIsOcclusionQueryNV pglIsOcclusionQueryNV;

			[RequiredByFeature("GL_NV_occlusion_query")]
			[SuppressUnmanagedCodeSecurity()]
			internal delegate void glBeginOcclusionQueryNV(UInt32 id);

			[RequiredByFeature("GL_NV_occlusion_query")]
			[ThreadStatic]
			internal static glBeginOcclusionQueryNV pglBeginOcclusionQueryNV;

			[RequiredByFeature("GL_NV_occlusion_query")]
			[SuppressUnmanagedCodeSecurity()]
			internal delegate void glEndOcclusionQueryNV();

			[RequiredByFeature("GL_NV_occlusion_query")]
			[ThreadStatic]
			internal static glEndOcclusionQueryNV pglEndOcclusionQueryNV;

			[RequiredByFeature("GL_NV_occlusion_query")]
			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate void glGetOcclusionQueryivNV(UInt32 id, Int32 pname, Int32* @params);

			[RequiredByFeature("GL_NV_occlusion_query")]
			[ThreadStatic]
			internal static glGetOcclusionQueryivNV pglGetOcclusionQueryivNV;

			[RequiredByFeature("GL_NV_occlusion_query")]
			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate void glGetOcclusionQueryuivNV(UInt32 id, Int32 pname, UInt32* @params);

			[RequiredByFeature("GL_NV_occlusion_query")]
			[ThreadStatic]
			internal static glGetOcclusionQueryuivNV pglGetOcclusionQueryuivNV;

		}
	}

}
