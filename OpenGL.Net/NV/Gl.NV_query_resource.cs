
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_query_resource")]
		public const int QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 0x9540;

		/// <summary>
		/// [GL] Value of GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_query_resource")]
		public const int QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 0x9542;

		/// <summary>
		/// [GL] Value of GL_QUERY_RESOURCE_SYS_RESERVED_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_query_resource")]
		public const int QUERY_RESOURCE_SYS_RESERVED_NV = 0x9544;

		/// <summary>
		/// [GL] Value of GL_QUERY_RESOURCE_TEXTURE_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_query_resource")]
		public const int QUERY_RESOURCE_TEXTURE_NV = 0x9545;

		/// <summary>
		/// [GL] Value of GL_QUERY_RESOURCE_RENDERBUFFER_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_query_resource")]
		public const int QUERY_RESOURCE_RENDERBUFFER_NV = 0x9546;

		/// <summary>
		/// [GL] Value of GL_QUERY_RESOURCE_BUFFEROBJECT_NV symbol.
		/// </summary>
		[RequiredByFeature("GL_NV_query_resource")]
		public const int QUERY_RESOURCE_BUFFEROBJECT_NV = 0x9547;

		/// <summary>
		/// [GL] glQueryResourceNV: Binding for glQueryResourceNV.
		/// </summary>
		/// <param name="queryType">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="tagId">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="bufSize">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="buffer">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		[RequiredByFeature("GL_NV_query_resource")]
		public static Int32 QueryResourceNV(Int32 queryType, Int32 tagId, UInt32 bufSize, Int32[] buffer)
		{
			Int32 retValue;

			unsafe {
				fixed (Int32* p_buffer = buffer)
				{
					Debug.Assert(Delegates.pglQueryResourceNV != null, "pglQueryResourceNV not implemented");
					retValue = Delegates.pglQueryResourceNV(queryType, tagId, bufSize, p_buffer);
					LogCommand("glQueryResourceNV", retValue, queryType, tagId, bufSize, buffer					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		internal unsafe static partial class Delegates
		{
			[RequiredByFeature("GL_NV_query_resource")]
			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate Int32 glQueryResourceNV(Int32 queryType, Int32 tagId, UInt32 bufSize, Int32* buffer);

			[RequiredByFeature("GL_NV_query_resource")]
			[ThreadStatic]
			internal static glQueryResourceNV pglQueryResourceNV;

		}
	}

}
