<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2009-2016 Luca Piccioni
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
// USA

using System;
using System.Diagnostics;

namespace OpenGL
{
<#
	string[] underlyingType =		new[] { "float",  "double" };
	string[] postfixes =			new[] { "",       "Double"};
	string[] zeroes =				new[] { "0.0f",   "0.0" };
	string[] ones =					new[] { "1.0f",   "1.0" };
	string[] vertexCastPostfixes =	new[] { "f",       "d"};

	for (int i = 0; i < underlyingType.Length; i++) {
		string className = String.Format("Vertex3{0}", postfixes[i]);
		string baseType = underlyingType[i];
		string vertexCastPostfix = vertexCastPostfixes[i];
#>
	/// <summary>
	/// Threedimensional vertex defined as reference type (<#= underlyingType[i] #> implementation).
	/// </summary>
	[DebuggerDisplay("<#= className #>: X={x} Y={y} Z={z}")]
	public class <#= className #> : ICopiable<<#= className #>>
	{
		#region Constructors
		
		/// <summary>
		/// <#= className #> constructor.
		/// </summary>
		public <#= className #>()
		{

		}

		/// <summary>
		/// <#= className #> constructor.
		/// </summary>
		/// <param name="v">
		/// A <see cref="Single"/> that specify the value of every component.
		/// </param>
		public <#= className #>(<#= baseType #> v)
			: this(v, v, v)
		{

		}

		/// <summary>
		/// <#= className #> constructor.
		/// </summary>
		/// <param name="v">
		/// A <see cref="<#= baseType #>"/>
		/// </param>
		public <#= className #>(<#= baseType #>[] v)
			: this(v[0], v[1], v[2])
		{

		}

		/// <summary>
		/// <#= className #> constructor.
		/// </summary>
		/// <param name="x">
		/// A <see cref="Single"/>
		/// </param>
		/// <param name="y">
		/// A <see cref="Single"/>
		/// </param>
		/// <param name="z">
		/// A <see cref="Single"/>
		/// </param>
		public <#= className #>(<#= baseType #> x, <#= baseType #> y, <#= baseType #> z)
		{
			X = x;
			Y = y;
			Z = z;
		}

		/// <summary>
		/// <#= className #> constructor.
		/// </summary>
		/// <param name="other">
		/// A <see cref="Vertex3f"/>
		/// </param>
		public <#= className #>(Vertex3f other) : this(other.x, other.y, other.z) { }

		/// <summary>
		/// <#= className #> constructor.
		/// </summary>
		/// <param name="other">
		/// A <see cref="<#= className #>"/>
		/// </param>
		public <#= className #>(<#= className #> other) : this(other.X, other.Y, other.X) { }

		#endregion

		#region Vector Components

		/// <summary>
		/// Vertex coordinate X.
		/// </summary>
		public <#= baseType #> X;

		/// <summary>
		/// Vertex coordinate Y.
		/// </summary>
		public <#= baseType #> Y;

		/// <summary>
		/// Vertex coordinate Z.
		/// </summary>
		public <#= baseType #> Z;

		#endregion

		#region Cast Operators

		/// <summary>
		/// Cast to float[] operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be converted.
		/// </param>
		/// <returns>
		/// A <see cref="<#= baseType #>[]"/> equivalent to <paramref name="a"/>.
		/// </returns>
		public static implicit operator <#= baseType #>[](<#= className #> a)
		{
			<#= baseType #>[] v = new <#= baseType #>[3];

			v[0] = a.X;
			v[1] = a.Y;
			v[2] = a.Z;

			return (v);
		}

		/// <summary>
		/// Cast to Vertex3<#= vertexCastPostfix #> operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be converted.
		/// </param>
		/// <returns>
		/// A <see cref="Vertex3<#= vertexCastPostfix #>"/> equivalent to <paramref name="a"/>
		/// </returns>
		public static implicit operator Vertex3<#= vertexCastPostfix #>(<#= className #> a)
		{
			Vertex3<#= vertexCastPostfix #> v = new Vertex3<#= vertexCastPostfix #>();

			v.x = a.X;
			v.y = a.Y;
			v.z = a.Z;

			return (v);
		}

		#endregion

		#region Notable Vertex

		/// <summary>
		/// Origin vertex.
		/// </summary>
		public static readonly <#= className #> Zero = new <#= className #>(0.0f);

		/// <summary>
		/// Unit vertex along all axes.
		/// </summary>
		public static readonly <#= className #> One = new <#= className #>(1.0f);

		/// <summary>
		/// Unit vertex along X axis.
		/// </summary>
		public static readonly <#= className #> UnitX = new <#= className #>(1.0f, 0.0f, 0.0f);

		/// <summary>
		/// Unit vertex along Y axis.
		/// </summary>
		public static readonly <#= className #> UnitY = new <#= className #>(0.0f, 1.0f, 0.0f);

		/// <summary>
		/// Unit vertex along Z axis.
		/// </summary>
		public static readonly <#= className #> UnitZ = new <#= className #>(0.0f, 0.0f, 1.0f);

		#endregion

		#region ICopiable<Vertex3> Implementation

		/// <summary>
		/// Copy the object content to this instance.
		/// </summary>
		/// <param name="other">
		/// A <see name="<#= className #>"/> that specify the object from where the information is copied.
		/// </param>
		public void Copy(<#= className #> other)
		{
			if (other == null)
				throw new ArgumentNullException("other");

			X = other.X;
			Y = other.Y;
			Z = other.Z;
		}

		/// <summary>
		/// Copy the object content to this instance.
		/// </summary>
		/// <param name="other">
		/// A <see cref="Object"/> that specify the object from where the information is copied.
		/// </param>
		public void Copy(object other)
		{
			if (other is <#= className #>)
				Copy(other as <#= className #>);				// Copoy reference type
			else if (other is Vertex3f)
				Copy(new <#= className #>((Vertex3f)other));	// Copy corresponding value type, for animation system
			else
				throw new ArgumentException("not supported object", "other");
		}

		#endregion
	}

<#
}
#>
}