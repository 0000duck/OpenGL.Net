
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_ELEMENT_ARRAY_APPLE symbol.
		/// </summary>
		[RequiredByFeature("GL_APPLE_element_array")]
		public const int ELEMENT_ARRAY_APPLE = 0x8A0C;

		/// <summary>
		/// [GL] Value of GL_ELEMENT_ARRAY_TYPE_APPLE symbol.
		/// </summary>
		[RequiredByFeature("GL_APPLE_element_array")]
		public const int ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;

		/// <summary>
		/// [GL] Value of GL_ELEMENT_ARRAY_POINTER_APPLE symbol.
		/// </summary>
		[RequiredByFeature("GL_APPLE_element_array")]
		public const int ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;

		/// <summary>
		/// [GL] glElementPointerAPPLE: Binding for glElementPointerAPPLE.
		/// </summary>
		/// <param name="type">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:IntPtr"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void ElementPointerAPPLE(Int32 type, IntPtr pointer)
		{
			Debug.Assert(Delegates.pglElementPointerAPPLE != null, "pglElementPointerAPPLE not implemented");
			Delegates.pglElementPointerAPPLE(type, pointer);
			LogCommand("glElementPointerAPPLE", null, type, pointer			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glElementPointerAPPLE: Binding for glElementPointerAPPLE.
		/// </summary>
		/// <param name="type">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="pointer">
		/// A <see cref="T:Object"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void ElementPointerAPPLE(Int32 type, Object pointer)
		{
			GCHandle pin_pointer = GCHandle.Alloc(pointer, GCHandleType.Pinned);
			try {
				ElementPointerAPPLE(type, pin_pointer.AddrOfPinnedObject());
			} finally {
				pin_pointer.Free();
			}
		}

		/// <summary>
		/// [GL] glDrawElementArrayAPPLE: Binding for glDrawElementArrayAPPLE.
		/// </summary>
		/// <param name="mode">
		/// A <see cref="T:PrimitiveType"/>.
		/// </param>
		/// <param name="first">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:Int32"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void DrawElementArrayAPPLE(PrimitiveType mode, Int32 first, Int32 count)
		{
			Debug.Assert(Delegates.pglDrawElementArrayAPPLE != null, "pglDrawElementArrayAPPLE not implemented");
			Delegates.pglDrawElementArrayAPPLE((Int32)mode, first, count);
			LogCommand("glDrawElementArrayAPPLE", null, mode, first, count			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glDrawRangeElementArrayAPPLE: Binding for glDrawRangeElementArrayAPPLE.
		/// </summary>
		/// <param name="mode">
		/// A <see cref="T:PrimitiveType"/>.
		/// </param>
		/// <param name="start">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="end">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="first">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:Int32"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void DrawRangeElementArrayAPPLE(PrimitiveType mode, UInt32 start, UInt32 end, Int32 first, Int32 count)
		{
			Debug.Assert(Delegates.pglDrawRangeElementArrayAPPLE != null, "pglDrawRangeElementArrayAPPLE not implemented");
			Delegates.pglDrawRangeElementArrayAPPLE((Int32)mode, start, end, first, count);
			LogCommand("glDrawRangeElementArrayAPPLE", null, mode, start, end, first, count			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMultiDrawElementArrayAPPLE: Binding for glMultiDrawElementArrayAPPLE.
		/// </summary>
		/// <param name="mode">
		/// A <see cref="T:PrimitiveType"/>.
		/// </param>
		/// <param name="first">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		/// <param name="primcount">
		/// A <see cref="T:Int32"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void MultiDrawElementArrayAPPLE(PrimitiveType mode, Int32[] first, Int32[] count, Int32 primcount)
		{
			unsafe {
				fixed (Int32* p_first = first)
				fixed (Int32* p_count = count)
				{
					Debug.Assert(Delegates.pglMultiDrawElementArrayAPPLE != null, "pglMultiDrawElementArrayAPPLE not implemented");
					Delegates.pglMultiDrawElementArrayAPPLE((Int32)mode, p_first, p_count, primcount);
					LogCommand("glMultiDrawElementArrayAPPLE", null, mode, first, count, primcount					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMultiDrawElementArrayAPPLE: Binding for glMultiDrawElementArrayAPPLE.
		/// </summary>
		/// <param name="mode">
		/// A <see cref="T:PrimitiveType"/>.
		/// </param>
		/// <param name="first">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void MultiDrawElementArrayAPPLE(PrimitiveType mode, Int32[] first, Int32[] count)
		{
			unsafe {
				fixed (Int32* p_first = first)
				fixed (Int32* p_count = count)
				{
					Debug.Assert(Delegates.pglMultiDrawElementArrayAPPLE != null, "pglMultiDrawElementArrayAPPLE not implemented");
					Delegates.pglMultiDrawElementArrayAPPLE((Int32)mode, p_first, p_count, (Int32)first.Length);
					LogCommand("glMultiDrawElementArrayAPPLE", null, mode, first, count, first.Length					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMultiDrawRangeElementArrayAPPLE: Binding for glMultiDrawRangeElementArrayAPPLE.
		/// </summary>
		/// <param name="mode">
		/// A <see cref="T:PrimitiveType"/>.
		/// </param>
		/// <param name="start">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="end">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="first">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		/// <param name="primcount">
		/// A <see cref="T:Int32"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, UInt32 start, UInt32 end, Int32[] first, Int32[] count, Int32 primcount)
		{
			unsafe {
				fixed (Int32* p_first = first)
				fixed (Int32* p_count = count)
				{
					Debug.Assert(Delegates.pglMultiDrawRangeElementArrayAPPLE != null, "pglMultiDrawRangeElementArrayAPPLE not implemented");
					Delegates.pglMultiDrawRangeElementArrayAPPLE((Int32)mode, start, end, p_first, p_count, primcount);
					LogCommand("glMultiDrawRangeElementArrayAPPLE", null, mode, start, end, first, count, primcount					);
				}
			}
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glMultiDrawRangeElementArrayAPPLE: Binding for glMultiDrawRangeElementArrayAPPLE.
		/// </summary>
		/// <param name="mode">
		/// A <see cref="T:PrimitiveType"/>.
		/// </param>
		/// <param name="start">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="end">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="first">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		/// <param name="count">
		/// A <see cref="T:Int32[]"/>.
		/// </param>
		[RequiredByFeature("GL_APPLE_element_array")]
		public static void MultiDrawRangeElementArrayAPPLE(PrimitiveType mode, UInt32 start, UInt32 end, Int32[] first, Int32[] count)
		{
			unsafe {
				fixed (Int32* p_first = first)
				fixed (Int32* p_count = count)
				{
					Debug.Assert(Delegates.pglMultiDrawRangeElementArrayAPPLE != null, "pglMultiDrawRangeElementArrayAPPLE not implemented");
					Delegates.pglMultiDrawRangeElementArrayAPPLE((Int32)mode, start, end, p_first, p_count, (Int32)first.Length);
					LogCommand("glMultiDrawRangeElementArrayAPPLE", null, mode, start, end, first, count, first.Length					);
				}
			}
			DebugCheckErrors(null);
		}

		internal unsafe static partial class UnsafeNativeMethods
		{
			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			[DllImport(Library, EntryPoint = "glElementPointerAPPLE", ExactSpelling = true)]
			internal extern static unsafe void glElementPointerAPPLE(Int32 type, IntPtr pointer);

			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			[DllImport(Library, EntryPoint = "glDrawElementArrayAPPLE", ExactSpelling = true)]
			internal extern static void glDrawElementArrayAPPLE(Int32 mode, Int32 first, Int32 count);

			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			[DllImport(Library, EntryPoint = "glDrawRangeElementArrayAPPLE", ExactSpelling = true)]
			internal extern static void glDrawRangeElementArrayAPPLE(Int32 mode, UInt32 start, UInt32 end, Int32 first, Int32 count);

			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			[DllImport(Library, EntryPoint = "glMultiDrawElementArrayAPPLE", ExactSpelling = true)]
			internal extern static unsafe void glMultiDrawElementArrayAPPLE(Int32 mode, Int32* first, Int32* count, Int32 primcount);

			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			[DllImport(Library, EntryPoint = "glMultiDrawRangeElementArrayAPPLE", ExactSpelling = true)]
			internal extern static unsafe void glMultiDrawRangeElementArrayAPPLE(Int32 mode, UInt32 start, UInt32 end, Int32* first, Int32* count, Int32 primcount);

		}

		internal unsafe static partial class Delegates
		{
			[RequiredByFeature("GL_APPLE_element_array")]
			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			internal unsafe delegate void glElementPointerAPPLE(Int32 type, IntPtr pointer);

			[RequiredByFeature("GL_APPLE_element_array")]
			[ThreadStatic]
			internal static glElementPointerAPPLE pglElementPointerAPPLE;

			[RequiredByFeature("GL_APPLE_element_array")]
			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			internal delegate void glDrawElementArrayAPPLE(Int32 mode, Int32 first, Int32 count);

			[RequiredByFeature("GL_APPLE_element_array")]
			[ThreadStatic]
			internal static glDrawElementArrayAPPLE pglDrawElementArrayAPPLE;

			[RequiredByFeature("GL_APPLE_element_array")]
			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			internal delegate void glDrawRangeElementArrayAPPLE(Int32 mode, UInt32 start, UInt32 end, Int32 first, Int32 count);

			[RequiredByFeature("GL_APPLE_element_array")]
			[ThreadStatic]
			internal static glDrawRangeElementArrayAPPLE pglDrawRangeElementArrayAPPLE;

			[RequiredByFeature("GL_APPLE_element_array")]
			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			internal unsafe delegate void glMultiDrawElementArrayAPPLE(Int32 mode, Int32* first, Int32* count, Int32 primcount);

			[RequiredByFeature("GL_APPLE_element_array")]
			[ThreadStatic]
			internal static glMultiDrawElementArrayAPPLE pglMultiDrawElementArrayAPPLE;

			[RequiredByFeature("GL_APPLE_element_array")]
			#if !NETCORE
			[SuppressUnmanagedCodeSecurity()]
			#endif
			internal unsafe delegate void glMultiDrawRangeElementArrayAPPLE(Int32 mode, UInt32 start, UInt32 end, Int32* first, Int32* count, Int32 primcount);

			[RequiredByFeature("GL_APPLE_element_array")]
			[ThreadStatic]
			internal static glMultiDrawRangeElementArrayAPPLE pglMultiDrawRangeElementArrayAPPLE;

		}
	}

}
