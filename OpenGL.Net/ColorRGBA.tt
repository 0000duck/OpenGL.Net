<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

using System;
using System.Diagnostics;
#if HAVE_SYSTEM_DRAWING
using System.Drawing;
#endif
using System.Runtime.InteropServices;

namespace OpenGL
{
<#
	string[] postfixes =			new[] { "32",     "64",     "F",     "HF"        };
	string[] baseTypes =		new[] { "byte",   "ushort", "float", "HalfFloat" };
	string[] pixelTypes =			new[] { "RGBA32", "RGBA64", "RGBAF", "RGBAHF"     };
	string[] structType =			new[] { "byte",   "ushort", "float", "HalfFloat" };
	string[] vertexBaseType =		new[] { "UByte",  "UShort", "Float", "Half" };
	int[] structMembersCount =		new[] {  4,        4,        4,       4          };
	string[] zeros =				new[] { "0",      "0",     "0.0f",   "(HalfFloat)0.0f"};
	string[] ones =					new[] { null,     null,     "1.0f",  "(HalfFloat)1.0f"};
	int[][] bitss =					new[] {  new[] { 1 },    null,     null,     null,      };
	string[] castSuffixes =			new[] { "ub",   "us", "f", "hf" };

	for (int i = 0; i < postfixes.Length; i++) {
		string className = String.Format("ColorRGBA{0}", postfixes[i]);
		string baseType = baseTypes[i];
		string componentType = structType[i];
		string pixelType = pixelTypes[i];
		int[] bits = bitss[i];
		string one = ones[i];
		string zero = zeros[i];
		string castSuffix = castSuffixes[i];

		if (one == null)
			one = componentType + ".MaxValue";
#>
	/// <summary>
	/// RGBA color.
	/// </summary>
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	public struct <#= className #> : IColorRGBA<<#= baseType #>>, IEquatable<<#= className #>>
	{
		#region Constructors

		/// <summary>
		/// Construct a <#= className #> specifying RGB components.
		/// </summary>
		/// <param name="r">
		/// A <see cref="<#= baseType #>"/> that specify the red component.
		/// </param>
		/// <param name="g">
		/// A <see cref="<#= baseType #>"/> that specify the green component.
		/// </param>
		/// <param name="b">
		/// A <see cref="<#= baseType #>"/> that specify the blue component.
		/// </param>
		public <#= className #>(<#= baseType #> r, <#= baseType #> g, <#= baseType #> b) :
			this(r, g, b, <#= one #>)
		{

		}

		/// <summary>
		/// Construct a <#= className #> specifying RGB components.
		/// </summary>
		/// <param name="r">
		/// A <see cref="<#= baseType #>"/> that specify the red component.
		/// </param>
		/// <param name="g">
		/// A <see cref="<#= baseType #>"/> that specify the green component.
		/// </param>
		/// <param name="b">
		/// A <see cref="<#= baseType #>"/> that specify the blue component.
		/// </param>
		/// <param name="a">
		/// A <see cref="<#= baseType #>"/> that specify the alpha component.
		/// </param>
		public <#= className #>(<#= baseType #> r, <#= baseType #> g, <#= baseType #> b, <#= baseType #> a)
		{
			// Setup RGBA components
			this.r = r;
			this.g = g;
			this.b = b;
			this.a = a;
		}

		#endregion

		#region Structure

		/// <summary>
		/// Red color components.
		/// </summary>
		public <#= componentType #> r;

		/// <summary>
		/// Green color components.
		/// </summary>
		public <#= componentType #> g;

		/// <summary>
		/// Blue color components.
		/// </summary>
		public <#= componentType #> b;

		/// <summary>
		/// Alpha color components.
		/// </summary>
		public <#= componentType #> a;

		#endregion

		#region Cast Operators

		/// <summary>
		/// Cast to <#= componentType #>[] operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="T:<#= componentType #>[]"/> initialized with the vector components.
		/// </returns>
		public static implicit operator <#= componentType #>[](<#= className #> a)
		{
			<#= componentType #>[] v = new <#= componentType #>[4];

			v[0] = a.r;
			v[1] = a.g;
			v[2] = a.b;
			v[3] = a.a;

			return (v);
		}

		/// <summary>
		/// Cast to Vertex4<#= castSuffix #> operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="Vertex4<#= castSuffix #>"/> initialized with the vector components.
		/// </returns>
		public static implicit operator Vertex4<#= castSuffix #>(<#= className #> a)
		{
			return (new Vertex4<#= castSuffix #>(a.r, a.g, a.b, a.a));
		}

#if HAVE_SYSTEM_DRAWING

		/// <summary>
		/// Cast from Color operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="Color"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="T:<#= className #>"/> initialized with the color components.
		/// </returns>
		public static explicit operator <#= className #>(Color a)
		{
			<#= className #> c = new <#= className #>();

			c[0] = (float)a.R / byte.MaxValue;
			c[1] = (float)a.G / byte.MaxValue;
			c[2] = (float)a.B / byte.MaxValue;
			c[3] = (float)a.A / byte.MaxValue;

			return (c);
		}

#endif

		#endregion

		#region Arithmetic Operators

		/// <summary>
		/// Scalar multiply operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <param name="scalar">
		/// A <see cref="Single"/> that specify the right operand.
		/// </param>
		/// <returns>
		/// A <see cref="<#= className #>"/> that equals to the multiplication of <paramref name="a"/> with <paramref name="scalar"/>.
		/// </returns>
		public static <#= className #> operator*(<#= className #> a, float scalar)
		{
			<#= className #> v = new <#= className #>();

			v.r = (<#= componentType #>)(a.r * scalar);
			v.g = (<#= componentType #>)(a.g * scalar);
			v.b = (<#= componentType #>)(a.b * scalar);
			v.a = (<#= componentType #>)(a.a * scalar);

			return (v);
		}

		#endregion

		#region Equality Operators

		/// <summary>
		/// Equality operator.
		/// </summary>
		/// <param name="v1"></param>
		/// <param name="v2"></param>
		/// <returns></returns>
		public static bool operator ==(<#= className #> v1, <#= className #> v2)
		{
			return (v1.Equals(v2));
		}

		/// <summary>
		/// Inequality operator.
		/// </summary>
		/// <param name="v1"></param>
		/// <param name="v2"></param>
		/// <returns></returns>
		public static bool operator !=(<#= className #> v1, <#= className #> v2)
		{
			return (!v1.Equals(v2));
		}

		#endregion

		#region Notable Colors

		/// <summary>
		/// White color.
		/// </summary>
		public static readonly <#= className #> ColorWhite = new <#= className #>(<#= one #>, <#= one #>, <#= one #>, <#= one #>);

		/// <summary>
		/// Black color.
		/// </summary>
		public static readonly <#= className #> ColorBlack = new <#= className #>(<#= zero #>, <#= zero #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Red color.
		/// </summary>
		public static readonly <#= className #> ColorRed = new <#= className #>(<#= one #>, <#= zero #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Green color.
		/// </summary>
		public static readonly <#= className #> ColorGreen = new <#= className #>(<#= zero #>, <#= one #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Blue color.
		/// </summary>
		public static readonly <#= className #> ColorBlue = new <#= className #>(<#= zero #>, <#= zero #>, <#= one #>, <#= one #>);

		/// <summary>
		/// Yellow color.
		/// </summary>
		public static readonly <#= className #> ColorYellow = new <#= className #>(<#= one #>, <#= one #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Magenta color.
		/// </summary>
		public static readonly <#= className #> ColorMagenta = new <#= className #>(<#= one #>, <#= zero #>, <#= one #>, <#= one #>);

		/// <summary>
		/// Cyan color.
		/// </summary>
		public static readonly <#= className #> ColorCyan = new <#= className #>(<#= zero #>, <#= one #>, <#= one #>, <#= one #>);

		#endregion

		#region IColorRGBA<<#= baseType #>> Implementation

		/// <summary>
		/// Get or set the red component.
		/// </summary>
		public <#= baseType #> Red
		{
			get { return (r); }
			set { r = value; }
		}

		/// <summary>
		/// Get or set the green component.
		/// </summary>
		public <#= baseType #> Green
		{
			get { return (g); }
			set { g = value; }
		}

		/// <summary>
		/// Get or set the blue component.
		/// </summary>
		public <#= baseType #> Blue
		{
			get { return (b); }
			set { b = value; }
		}

		/// <summary>
		/// Get or set the alpha component.
		/// </summary>
		public <#= baseType #> Alpha
		{
			get { return (a); }
			set { a = value; }
		}

		#endregion

		#region IColor Implementation

		/// <summary>
		/// Get the PixelLayout correponding to this IColor.
		/// </summary>
		public PixelLayout PixelType { get { return (PixelLayout.<#= pixelType #>); } }

		/// <summary>
		/// Get of set color components.
		/// </summary>
		/// <param name="c">
		/// A <see cref="Int32"/> indicating the color component index.
		/// </param>
		/// <returns>
		/// The color component converted from a normalized floating point number.
		/// </returns>
		/// <exception cref="IndexOutOfRangeException">
		/// Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
		/// </exception>
		public float this[int c]
		{<# if (baseType != "float" && baseType != "HalfFloat") { #>
			get
			{
				switch (c) {
					case 0: return ((float)Red   / <#= baseType #>.MaxValue);
					case 1: return ((float)Green / <#= baseType #>.MaxValue);
					case 2: return ((float)Blue  / <#= baseType #>.MaxValue);
					case 3: return ((float)Alpha / <#= baseType #>.MaxValue);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= baseType #>)(value * <#= baseType #>.MaxValue); break;
					case 1: Green = (<#= baseType #>)(value * <#= baseType #>.MaxValue); break;
					case 2: Blue =  (<#= baseType #>)(value * <#= baseType #>.MaxValue); break;
					case 3: Alpha = (<#= baseType #>)(value * <#= baseType #>.MaxValue); break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } else { #>
			get
			{
				switch (c) {
					case 0: return (Red);
					case 1: return (Green);
					case 2: return (Blue);
					case 3: return (Alpha);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= baseType #>)value; break;
					case 1: Green = (<#= baseType #>)value; break;
					case 2: Blue =  (<#= baseType #>)value; break;
					case 3: Alpha = (<#= baseType #>)value; break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } #>
		}

		#endregion

		#region IEquatable Implementation

		/// <summary>
		/// Indicates whether the this <#= className #> is equal to another <#= className #>, tolerating an absolute error.
		/// </summary>
		/// <param name="other">
		/// The <see cref="<#= className #>"/> to compare with this <#= className #>.
		/// </param>
		/// <param name="precision">
		/// The <see cref="<#= baseType #>"/> that specifies the maximum absolute error tollerance.
		/// </param>
		/// <returns>
		/// It returns true if the this <#= className #> is equal to <paramref name="other"/>; otherwise, false.
		/// </returns>
		public bool Equals(<#= className #> other, <#= baseType #> precision)
		{
			if (Math.Abs(r - other.r) > precision)
				return (false);
			if (Math.Abs(g - other.g) > precision)
				return (false);
			if (Math.Abs(b - other.b) > precision)
				return (false);
			if (Math.Abs(a - other.a) > precision)
				return (false);

			return (true);
		}

		/// <summary>
		/// Indicates whether the this <#= className #> is equal to another <#= className #>.
		/// </summary>
		/// <param name="other">
		/// An IVertex3 to compare with this object.
		/// </param>
		/// <returns>
		/// It returns true if the this IVertex3 is equal to <paramref name="other"/>; otherwise, false.
		/// </returns>
		public bool Equals(<#= className #> other)
		{
			return (r == other.r && g == other.g && b == other.b && a == other.a);
		}

		/// <summary>
		/// Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
		/// </summary>
		/// <param name="obj">
		/// The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.
		/// </param>
		/// <returns>
		/// It returns true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
		/// </returns>
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj))
				return (false);
			if (obj.GetType() != typeof(<#= className #>))
				return (false);
			
			return (Equals((<#= className #>)obj));
		}

		/// <summary>
		/// Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"/> is suitable for
		/// use in hashing algorithms and data structures like a hash table.
		/// </summary>
		/// <returns>
		/// A hash code for the current <see cref="T:System.Object"/>.
		/// </returns>
		public override int GetHashCode()
		{
			unchecked {
				int result = r.GetHashCode();
				result = (result * 397) ^ g.GetHashCode();
				result = (result * 397) ^ b.GetHashCode();
				result = (result * 397) ^ a.GetHashCode();

				return result;
			}
		}

		#endregion
	}

<# } #>
}
