<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>
// Copyright (C) 2009-2017 Luca Piccioni
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
// USA

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace OpenGL
{<#
	string[] postfixes =			new[] { "32",     "64",     "F",     "HF"        };
	string[] interfaceTypes =		new[] { "byte",   "ushort", "float", "HalfFloat" };
	string[] pixelTypes =			new[] { "RGBA32", "RGBA64", "RGBAF", "RGBAHF"     };
	string[] structType =			new[] { "byte",   "ushort", "float", "HalfFloat" };
	string[] vertexBaseType =		new[] { "UByte",  "UShort", "Float", "Half" };
	int[] structMembersCount =		new[] {  4,        4,        4,       4          };
	string[] zeros =				new[] { "0",      "0",     "0.0f",   "(HalfFloat)0.0f"};
	string[] ones =					new[] { null,     null,     "1.0f",  "(HalfFloat)1.0f"};
	int[][] bitss =					new[] {  new[] { 1 },    null,     null,     null,      };
	string[] castSuffixes =			new[] { "ub",   "us", "f", "hf" };

	for (int i = 0; i < postfixes.Length; i++) {
		string className = String.Format("ColorRGBA{0}", postfixes[i]);
		string interfaceType = interfaceTypes[i];
		string componentType = structType[i];
		string pixelType = pixelTypes[i];
		int[] bits = bitss[i];
		string one = ones[i];
		string zero = zeros[i];
		string castSuffix = castSuffixes[i];

		if (one == null)
			one = componentType + ".MaxValue";
#>
	/// <summary>
	/// RGBA color.
	/// </summary>
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	[ArrayBufferItem(VertexBaseType.<#= vertexBaseType[i] #>, 4)]
	public struct <#= className #> : IColorRGBA<<#= interfaceType #>>
	{
		#region Constructors

		/// <summary>
		/// Construct a <#= className #> specifying RGB components.
		/// </summary>
		/// <param name="r">
		/// A <see cref="<#= interfaceType #>"/> that specify the red component.
		/// </param>
		/// <param name="g">
		/// A <see cref="<#= interfaceType #>"/> that specify the green component.
		/// </param>
		/// <param name="b">
		/// A <see cref="<#= interfaceType #>"/> that specify the blue component.
		/// </param>
		public <#= className #>(<#= interfaceType #> r, <#= interfaceType #> g, <#= interfaceType #> b) :
			this(r, g, b, <#= one #>)
		{

		}

		/// <summary>
		/// Construct a <#= className #> specifying RGB components.
		/// </summary>
		/// <param name="r">
		/// A <see cref="<#= interfaceType #>"/> that specify the red component.
		/// </param>
		/// <param name="g">
		/// A <see cref="<#= interfaceType #>"/> that specify the green component.
		/// </param>
		/// <param name="b">
		/// A <see cref="<#= interfaceType #>"/> that specify the blue component.
		/// </param>
		/// <param name="a">
		/// A <see cref="<#= interfaceType #>"/> that specify the alpha component.
		/// </param><#
if (structMembersCount[i] == 1) { #>
		public <#= className #>(<#= interfaceType #> r, <#= interfaceType #> g, <#= interfaceType #> b, <#= interfaceType #> a)
		{
			// Reset structure
			rgb = 0;
			// Setup RGBA components
			Red = r; Green = g; Blue = b; Alpha = a;
		}
<# } else { #>
		public <#= className #>(<#= interfaceType #> r, <#= interfaceType #> g, <#= interfaceType #> b, <#= interfaceType #> a)
		{
			// Setup RGBA components
			this.r = r;
			this.g = g;
			this.b = b;
			this.a = a;
		}
<# } #>
		#endregion

		#region Structure
<# if (structMembersCount[i] == 1) { #>
		/// <summary>
		/// RGB color components (packed).
		/// </summary>
		public <#= componentType #> rgba;
<# } else { #>
		/// <summary>
		/// Red color components.
		/// </summary>
		public <#= componentType #> r;

		/// <summary>
		/// Green color components.
		/// </summary>
		public <#= componentType #> g;

		/// <summary>
		/// Blue color components.
		/// </summary>
		public <#= componentType #> b;

		/// <summary>
		/// Alpha color components.
		/// </summary>
		public <#= componentType #> a;
<# } #>
		#endregion

		#region Cast Operators

		/// <summary>
		/// Cast to <#= componentType #>[] operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="T:<#= componentType #>[]"/> initialized with the vector components.
		/// </returns>
		public static implicit operator <#= componentType #>[](<#= className #> a)
		{
			<#= componentType #>[] v = new <#= componentType #>[4];

			v[0] = a.r;
			v[1] = a.g;
			v[2] = a.b;
			v[3] = a.a;

			return (v);
		}

		/// <summary>
		/// Cast to Vertex4<#= castSuffix #> operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <returns>
		/// A <see cref="Vertex4<#= castSuffix #>"/> initialized with the vector components.
		/// </returns>
		public static implicit operator Vertex4<#= castSuffix #>(<#= className #> a)
		{
			return (new Vertex4<#= castSuffix #>(a.r, a.g, a.b, a.a));
		}

		#endregion

		#region Arithmetic Operators

		/// <summary>
		/// Scalar multiply operator.
		/// </summary>
		/// <param name="a">
		/// A <see cref="<#= className #>"/> to be casted.
		/// </param>
		/// <param name="scalar">
		/// A <see cref="Single"/> that specify the right operand.
		/// </param>
		/// <returns>
		/// A <see cref="<#= className #>"/> that equals to the multiplication of <paramref name="a"/> with <paramref name="scalar"/>.
		/// </returns>
		public static <#= className #> operator*(<#= className #> a, float scalar)
		{
			<#= className #> v = new <#= className #>();

			v.r = (<#= componentType #>)(a.r * scalar);
			v.g = (<#= componentType #>)(a.g * scalar);
			v.b = (<#= componentType #>)(a.b * scalar);
			v.a = (<#= componentType #>)(a.a * scalar);

			return (v);
		}

		#endregion

		#region Notable Colors

		/// <summary>
		/// White color.
		/// </summary>
		public static readonly <#= className #> ColorWhite = new <#= className #>(<#= one #>, <#= one #>, <#= one #>, <#= one #>);

		/// <summary>
		/// Black color.
		/// </summary>
		public static readonly <#= className #> ColorBlack = new <#= className #>(<#= zero #>, <#= zero #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Red color.
		/// </summary>
		public static readonly <#= className #> ColorRed = new <#= className #>(<#= one #>, <#= zero #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Green color.
		/// </summary>
		public static readonly <#= className #> ColorGreen = new <#= className #>(<#= zero #>, <#= one #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Blue color.
		/// </summary>
		public static readonly <#= className #> ColorBlue = new <#= className #>(<#= zero #>, <#= zero #>, <#= one #>, <#= one #>);

		/// <summary>
		/// Yellow color.
		/// </summary>
		public static readonly <#= className #> ColorYellow = new <#= className #>(<#= one #>, <#= one #>, <#= zero #>, <#= one #>);

		/// <summary>
		/// Magenta color.
		/// </summary>
		public static readonly <#= className #> ColorMagenta = new <#= className #>(<#= one #>, <#= zero #>, <#= one #>, <#= one #>);

		/// <summary>
		/// Cyan color.
		/// </summary>
		public static readonly <#= className #> ColorCyan = new <#= className #>(<#= zero #>, <#= one #>, <#= one #>, <#= one #>);

		#endregion

		#region IColorRGBA<<#= interfaceType #>> Implementation

		/// <summary>
		/// Get or set the red component.
		/// </summary>
<# if (structMembersCount[i] == 1) {
	int rOffset = bits[0], rWidth = bits[1];
	int rMask = 1;								for (int b = 1; b < rWidth; b++) rMask = (rMask << 1) | 1;
	int rResetMask = rMask << rOffset;
#>
		public <#= interfaceType #> Red
		{
			get { return (<#= interfaceType #>)(((rgb >> <#= rOffset #>) & 0x<#= rMask.ToString("X2") #>) << <#= 8 - rWidth #>); }
			set { rgb = (<#= componentType #>)unchecked((rgb & ~0x<#= rResetMask.ToString("X2") #>) | (value >> <#= 8 - rWidth #>) << <#= rOffset #>); }
		}
<# } else { #>
		public <#= interfaceType #> Red
		{
			get { return (r); }
			set { r = value; }
		}
<# } #>
		/// <summary>
		/// Get or set the green component.
		/// </summary><#
if (structMembersCount[i] == 1) {
	int gOffset = bits[2], gWidth = bits[3];
	int gMask = 1;							for (int b = 1; b < gWidth; b++) gMask = (gMask << 1) | 1;
	int gResetMask = gMask << gOffset;
#>
		public <#= interfaceType #> Green
		{
			get { return (<#= interfaceType #>)(((rgb >> <#= gOffset #>) & 0x<#= gMask.ToString("X2") #>) << <#= 8 - gWidth #>); }
			set { rgb = (<#= componentType #>)unchecked((rgb & ~0x<#= gResetMask.ToString("X2") #>) | (value >> <#= 8 - gWidth #>) << <#= gOffset #>); }
		}
<# } else { #>
		public <#= interfaceType #> Green
		{
			get { return (g); }
			set { g = value; }
		}
<# } #>
		/// <summary>
		/// Get or set the blue component.
		/// </summary><#
if (structMembersCount[i] == 1) {
	int bOffset = bits[4], bWidth = bits[5];
	int bMask = 1;							
	for (int b = 1; b < bWidth; b++) bMask = (bMask << 1) | 1;
	int bResetMask = bMask << bOffset;
#>
		public <#= interfaceType #> Blue
		{
			get { return (<#= interfaceType #>)(((rgb >> <#= bOffset #>) & 0x<#= bMask.ToString("X2") #>) << <#= 8 - bWidth #>); }
			set { rgb = (<#= componentType #>)unchecked((rgb & ~0x<#= bResetMask.ToString("X2") #>) | (value >> <#= 8 - bWidth #>)); }
		}
<# } else { #>
		public <#= interfaceType #> Blue
		{
			get { return (b); }
			set { b = value; }
		}
<# } #>
		/// <summary>
		/// Get or set the alpha component.
		/// </summary><#
if (structMembersCount[i] == 1) {
	int aOffset = bits[6], aWidth = bits[7];
	int aMask = 1;							
	for (int b = 1; b < aWidth; b++) aMask = (aMask << 1) | 1;
	int aResetMask = aMask << aOffset;
#>
		public <#= interfaceType #> Alpha
		{
			get { return (<#= interfaceType #>)(((rgb >> <#= aOffset #>) & 0x<#= aMask.ToString("X2") #>) << <#= 8 - aWidth #>); }
			set { rgb = (<#= componentType #>)unchecked((rgb & ~0x<#= aResetMask.ToString("X2") #>) | (value >> <#= 8 - aWidth #>)); }
		}
<# } else { #>
		public <#= interfaceType #> Alpha
		{
			get { return (a); }
			set { a = value; }
		}
<# } #>
		#endregion

		#region IColor Implementation

		/// <summary>
		/// Get the PixelLayout correponding to this IColor.
		/// </summary>
		public PixelLayout PixelType { get { return (PixelLayout.<#= pixelType #>); } }

		/// <summary>
		/// Get of set color components.
		/// </summary>
		/// <param name="c">
		/// A <see cref="Int32"/> indicating the color component index.
		/// </param>
		/// <returns>
		/// The color component converted from a normalized floating point number.
		/// </returns>
		/// <exception cref="IndexOutOfRangeException">
		/// Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
		/// </exception>
		public float this[int c]
		{<# if (interfaceType != "float" && interfaceType != "HalfFloat") { #>
			get
			{
				switch (c) {
					case 0: return ((float)Red   / <#= interfaceType #>.MaxValue);
					case 1: return ((float)Green / <#= interfaceType #>.MaxValue);
					case 2: return ((float)Blue  / <#= interfaceType #>.MaxValue);
					case 3: return ((float)Alpha / <#= interfaceType #>.MaxValue);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					case 1: Green = (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					case 2: Blue =  (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					case 3: Alpha = (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } else { #>
			get
			{
				switch (c) {
					case 0: return (Red);
					case 1: return (Green);
					case 2: return (Blue);
					case 3: return (Alpha);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= interfaceType #>)value; break;
					case 1: Green = (<#= interfaceType #>)value; break;
					case 2: Blue =  (<#= interfaceType #>)value; break;
					case 3: Alpha = (<#= interfaceType #>)value; break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } #>
		}

		#endregion
	}
<# } #>
}
