
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace OpenGL
{
	public partial class Gl
	{
		/// <summary>
		/// [GL] Value of GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG symbol.
		/// </summary>
		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		public const int FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x913C;

		/// <summary>
		/// [GL] Value of GL_NUM_DOWNSAMPLE_SCALES_IMG symbol.
		/// </summary>
		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		public const int NUM_DOWNSAMPLE_SCALES_IMG = 0x913D;

		/// <summary>
		/// [GL] Value of GL_DOWNSAMPLE_SCALES_IMG symbol.
		/// </summary>
		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		public const int DOWNSAMPLE_SCALES_IMG = 0x913E;

		/// <summary>
		/// [GL] Value of GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG symbol.
		/// </summary>
		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		public const int FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913F;

		/// <summary>
		/// [GL] glFramebufferTexture2DDownsampleIMG: Binding for glFramebufferTexture2DDownsampleIMG.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:FramebufferTarget"/>.
		/// </param>
		/// <param name="attachment">
		/// A <see cref="T:FramebufferAttachment"/>.
		/// </param>
		/// <param name="textarget">
		/// A <see cref="T:TextureTarget"/>.
		/// </param>
		/// <param name="texture">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="level">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="xscale">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="yscale">
		/// A <see cref="T:Int32"/>.
		/// </param>
		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		public static void FramebufferTexture2DIMG(FramebufferTarget target, FramebufferAttachment attachment, TextureTarget textarget, UInt32 texture, Int32 level, Int32 xscale, Int32 yscale)
		{
			Debug.Assert(Delegates.pglFramebufferTexture2DDownsampleIMG != null, "pglFramebufferTexture2DDownsampleIMG not implemented");
			Delegates.pglFramebufferTexture2DDownsampleIMG((Int32)target, (Int32)attachment, (Int32)textarget, texture, level, xscale, yscale);
			LogCommand("glFramebufferTexture2DDownsampleIMG", null, target, attachment, textarget, texture, level, xscale, yscale			);
			DebugCheckErrors(null);
		}

		/// <summary>
		/// [GL] glFramebufferTextureLayerDownsampleIMG: Binding for glFramebufferTextureLayerDownsampleIMG.
		/// </summary>
		/// <param name="target">
		/// A <see cref="T:FramebufferTarget"/>.
		/// </param>
		/// <param name="attachment">
		/// A <see cref="T:FramebufferAttachment"/>.
		/// </param>
		/// <param name="texture">
		/// A <see cref="T:UInt32"/>.
		/// </param>
		/// <param name="level">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="layer">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="xscale">
		/// A <see cref="T:Int32"/>.
		/// </param>
		/// <param name="yscale">
		/// A <see cref="T:Int32"/>.
		/// </param>
		[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
		public static void FramebufferTextureLayerIMG(FramebufferTarget target, FramebufferAttachment attachment, UInt32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale)
		{
			Debug.Assert(Delegates.pglFramebufferTextureLayerDownsampleIMG != null, "pglFramebufferTextureLayerDownsampleIMG not implemented");
			Delegates.pglFramebufferTextureLayerDownsampleIMG((Int32)target, (Int32)attachment, texture, level, layer, xscale, yscale);
			LogCommand("glFramebufferTextureLayerDownsampleIMG", null, target, attachment, texture, level, layer, xscale, yscale			);
			DebugCheckErrors(null);
		}

		internal unsafe static partial class UnsafeNativeMethods
		{
			#if !NETCORE && !NETSTANDARD1_4
			[SuppressUnmanagedCodeSecurity()]
			#endif
			[DllImport(Library, EntryPoint = "glFramebufferTexture2DDownsampleIMG", ExactSpelling = true)]
			internal extern static void glFramebufferTexture2DDownsampleIMG(Int32 target, Int32 attachment, Int32 textarget, UInt32 texture, Int32 level, Int32 xscale, Int32 yscale);

			#if !NETCORE && !NETSTANDARD1_4
			[SuppressUnmanagedCodeSecurity()]
			#endif
			[DllImport(Library, EntryPoint = "glFramebufferTextureLayerDownsampleIMG", ExactSpelling = true)]
			internal extern static void glFramebufferTextureLayerDownsampleIMG(Int32 target, Int32 attachment, UInt32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale);

		}

		internal unsafe static partial class Delegates
		{
			[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
			#if !NETCORE && !NETSTANDARD1_4
			[SuppressUnmanagedCodeSecurity()]
			#endif
			internal delegate void glFramebufferTexture2DDownsampleIMG(Int32 target, Int32 attachment, Int32 textarget, UInt32 texture, Int32 level, Int32 xscale, Int32 yscale);

			[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
			[ThreadStatic]
			internal static glFramebufferTexture2DDownsampleIMG pglFramebufferTexture2DDownsampleIMG;

			[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
			#if !NETCORE && !NETSTANDARD1_4
			[SuppressUnmanagedCodeSecurity()]
			#endif
			internal delegate void glFramebufferTextureLayerDownsampleIMG(Int32 target, Int32 attachment, UInt32 texture, Int32 level, Int32 layer, Int32 xscale, Int32 yscale);

			[RequiredByFeature("GL_IMG_framebuffer_downsample", Api = "gles2")]
			[ThreadStatic]
			internal static glFramebufferTextureLayerDownsampleIMG pglFramebufferTextureLayerDownsampleIMG;

		}
	}

}
