<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2009-2017 Luca Piccioni
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
// USA

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace OpenGL
{
<#
	string[] postfixes =		new[] { "8",    "16",     "32",   "F",     "D",      "HF"        };
	string[] interfaceTypes =	new[] { "byte", "byte",   "byte", "float", "double", "HalfFloat" };
	string[] pixelTypes =		new[] { "R8",   "R16",    "R32",  "RF",    "RD",     "RHF"     };
	string[] structType =		new[] { "byte", "ushort", "uint", "float", "double", "HalfFloat" };
	string[] vertexBaseType =	new[] { "Byte", "UShort", "UInt", "Float", "Double", "Half" };

	for (int i = 0; i < postfixes.Length; i++) {
		string className = String.Format("ColorR{0}", postfixes[i]);
		string interfaceType = interfaceTypes[i];
		string componentType = structType[i];
		string pixelType = pixelTypes[i];
#>
	/// <summary>
	/// R color (single component).
	/// </summary>
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
	[ArrayBufferItem(VertexBaseType.<#= vertexBaseType[i] #>, 1)]
	public struct <#= className #> : IColor
	{
		#region Constructors

		/// <summary>
		/// Construct a <#= className #> specifying R component.
		/// </summary>
		/// <param name="r">
		/// A <see cref="<#= interfaceType #>"/> that specify the red component.
		/// </param>
		public <#= className #>(<#= interfaceType #> r)
		{
			// Setup R components
			this.r = r;
		}

		#endregion

		#region Structure

		/// <summary>
		/// Red color component.
		/// </summary>
		public <#= componentType #> r;

		#endregion

		#region IColor Implementation

		/// <summary>
		/// Get the PixelLayout correponding to this IColor.
		/// </summary>
		public PixelLayout PixelType { get { return (PixelLayout.<#= pixelType #>); } }

		/// <summary>
		/// Get of set color components.
		/// </summary>
		/// <param name="c">
		/// A <see cref="Int32"/> indicating the color component index.
		/// </param>
		/// <returns>
		/// The color component converted from a normalized floating point number.
		/// </returns>
		/// <exception cref="IndexOutOfRangeException">
		/// Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
		/// </exception>
		public float this[int c]
		{
<# if (interfaceType != "double" && interfaceType != "float"&& interfaceType != "HalfFloat") { #>
			get
			{
				switch (c) {
					case 0: return ((float)r   / <#= interfaceType #>.MaxValue);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: r =   (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } else { #><#
	string explicitCastOnFloat = String.Empty;

	if (componentType == "double")
		explicitCastOnFloat = "(float)";
#>
			get
			{
				switch (c) {
					case 0: return (<#= explicitCastOnFloat #>r);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: r =   (<#= interfaceType #>)value; break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } #>
		}

		#endregion
	}

<#
}
#>
}
