<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2009-2016 Luca Piccioni
// 
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
// USA

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace OpenGL
{
<#
	int[] bits8  = new[] {  5, 3,	3, 3,	0, 2,     8  };
	int[] bits15 = new[] { 10, 5,	5, 5,	0, 5,     16 };
	int[] bits16 = new[] { 11, 5,	5, 6,	0, 5,     16 };

	string[] postfixes =		new[] { "8",    "15",     "16",     "24",    "48",     "96",    "F",     "D",      "HF"        };
	string[] interfaceTypes =	new[] { "byte", "byte",	  "byte",   "byte",  "ushort", "uint",  "float", "double", "HalfFloat" };
	string[] pixelTypes =		new[] { "RGB8", "RGB15",  "RGB16",  "RGB24", "RGB48",  "RGB96", "RGBF",  "RGBD",   "RGBHF"     };
	string[] structType =		new[] { "byte", "ushort", "ushort", "byte",  "ushort", "uint",  "float", "double", "HalfFloat" };
	string[] vertexBaseType =	new[] { null,   null,     null,     "Byte",  "UShort", "UInt",  "Float", "Double", "Half" };
	int[] structMembersCount =	new[] {  1,      1,        1,        3,       3,        3,       3,       3,        3          };
	int[][] bitss =				new[] {  bits8,  bits15,   bits16,   null,    null,     null,    null,    null,     null,      };

	for (int i = 0; i < postfixes.Length; i++) {
		string className = String.Format("ColorBGR{0}", postfixes[i]);
		string interfaceType = interfaceTypes[i];
		string componentType = structType[i];
		string pixelType = pixelTypes[i];
		int[] bits = bitss[i];
		int structTypeBits = bits != null ? bits[bits.Length - 1] : 0;
#>
	/// <summary>
	/// BGR color.
	/// </summary>
	[StructLayout(LayoutKind.Sequential, Pack = 1)]
<# if (vertexBaseType[i] != null) { #>
	[ArrayBufferItem(VertexBaseType.<#= vertexBaseType[i] #>, 3)]
<# } #>
	public struct <#= className #> : IColorRGB<<#= interfaceType #>>
	{
		#region Constructors

		/// <summary>
		/// Construct a <#= className #> specifying RGB components.
		/// </summary>
		/// <param name="r">
		/// A <see cref="<#= interfaceType #>"/> that specify the red component.
		/// </param>
		/// <param name="g">
		/// A <see cref="<#= interfaceType #>"/> that specify the green component.
		/// </param>
		/// <param name="b">
		/// A <see cref="<#= interfaceType #>"/> that specify the blue component.
		/// </param>
		public <#= className #>(<#= interfaceType #> r, <#= interfaceType #> g, <#= interfaceType #> b)
		{
<# if (structMembersCount[i] == 1) { #>
			// Reset structure
			bgr = 0;
			// Setup RGB components
			Red = r; Green = g; Blue = b;
<# } else { #>
			// Setup RGB components
			this.r = r;
			this.g = g;
			this.b = b;
<# } #>
		}

		#endregion

		#region Structure

<# if (structMembersCount[i] == 1) { #>
		/// <summary>
		/// BGR color components (packed).
		/// </summary>
		public <#= componentType #> bgr;

<# } else { #>
		/// <summary>
		/// Blue color components.
		/// </summary>
		public <#= componentType #> b;

		/// <summary>
		/// Green color components.
		/// </summary>
		public <#= componentType #> g;

		/// <summary>
		/// Red color components.
		/// </summary>
		public <#= componentType #> r;

<# } #>
		#endregion

		#region IColorRGB<<#= interfaceType #>> Implementation

		/// <summary>
		/// Get or set the red component.
		/// </summary>
		public <#= interfaceType #> Red
		{
<# if (structMembersCount[i] == 1) {
	int rOffset = bits[0], rWidth = bits[1];
	int rMask = 1;								for (int b = 1; b < rWidth; b++) rMask = (rMask << 1) | 1;
	int rResetMask = rMask << rOffset;
#>
			get { return (<#= interfaceType #>)(((bgr >> <#= rOffset #>) & 0x<#= rMask.ToString("X2") #>) << <#= 8 - rWidth #>); }
			set { bgr = (<#= componentType #>)unchecked((bgr & ~0x<#= rResetMask.ToString("X2") #>) | (value >> <#= 8 - rWidth #>) << <#= rOffset #>); }
<# } else { #>
			get { return (r); }
			set { r = value; }
<# } #>
		}
		
		/// <summary>
		/// Get or set the green component.
		/// </summary>
		public <#= interfaceType #> Green
		{
<# if (structMembersCount[i] == 1) {
	int gOffset = bits[2], gWidth = bits[3];
	int gMask = 1;							for (int b = 1; b < gWidth; b++) gMask = (gMask << 1) | 1;
	int gResetMask = gMask << gOffset;
#>
			get { return (<#= interfaceType #>)(((bgr >> <#= gOffset #>) & 0x<#= gMask.ToString("X2") #>) << <#= 8 - gWidth #>); }
			set { bgr = (<#= componentType #>)unchecked((bgr & ~0x<#= gResetMask.ToString("X2") #>) | (value >> <#= 8 - gWidth #>) << <#= gOffset #>); }
<# } else { #>
			get { return (g); }
			set { g = value; }
<# } #>
		}
		
		/// <summary>
		/// Get or set the blue component.
		/// </summary>
		public <#= interfaceType #> Blue
		{
<# if (structMembersCount[i] == 1) {
	int bOffset = bits[4], bWidth = bits[5];
	int bMask = 1;							
	for (int b = 1; b < bWidth; b++) bMask = (bMask << 1) | 1;
	int bResetMask = bMask << bOffset;
#>
			get { return (<#= interfaceType #>)(((bgr >> <#= bOffset #>) & 0x<#= bMask.ToString("X2") #>) << <#= 8 - bWidth #>); }
			set { bgr = (<#= componentType #>)unchecked((bgr & ~0x<#= bResetMask.ToString("X2") #>) | (value >> <#= 8 - bWidth #>)); }
<# } else { #>
			get { return (b); }
			set { b = value; }
<# } #>
		}
		
		#endregion

		#region IColor Implementation

		/// <summary>
		/// Get the PixelLayout correponding to this IColor.
		/// </summary>
		public PixelLayout PixelType { get { return (PixelLayout.<#= pixelType #>); } }

		/// <summary>
		/// Get of set color components.
		/// </summary>
		/// <param name="c">
		/// A <see cref="Int32"/> indicating the color component index.
		/// </param>
		/// <returns>
		/// The color component converted from a normalized floating point number.
		/// </returns>
		/// <exception cref="IndexOutOfRangeException">
		/// Exception thrown when <paramref name="c"/> is less than 0 or greater than the number of components of this IColor implementation.
		/// </exception>
		public float this[int c]
		{
<# if (interfaceType != "double" && interfaceType != "float"&& interfaceType != "HalfFloat") { #>
			get
			{
				switch (c) {
					case 0: return ((float)Red   / <#= interfaceType #>.MaxValue);
					case 1: return ((float)Green / <#= interfaceType #>.MaxValue);
					case 2: return ((float)Blue  / <#= interfaceType #>.MaxValue);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					case 1: Green = (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					case 2: Blue =  (<#= interfaceType #>)(value * <#= interfaceType #>.MaxValue); break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } else { #><#
	string explicitCastOnFloat = String.Empty;

	if (componentType == "double")
		explicitCastOnFloat = "(float)";
#>
			get
			{
				switch (c) {
					case 0: return (<#= explicitCastOnFloat #>Red);
					case 1: return (<#= explicitCastOnFloat #>Green);
					case 2: return (<#= explicitCastOnFloat #>Blue);
					default:
						throw new IndexOutOfRangeException();
				}
			}
			set
			{
				if (value < 0.0f || value > 1.0f)
					throw new InvalidOperationException("value out of range");
				switch (c) {
					case 0: Red =   (<#= interfaceType #>)value; break;
					case 1: Green = (<#= interfaceType #>)value; break;
					case 2: Blue =  (<#= interfaceType #>)value; break;
					default:
						throw new IndexOutOfRangeException();
				}
			}
<# } #>
		}

		#endregion
	}

<#
}
#>
}
