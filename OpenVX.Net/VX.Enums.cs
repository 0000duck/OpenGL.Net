
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

// Disable "'token' is obsolete" warnings
#pragma warning disable 618

using System;

using Khronos;

namespace OpenVX
{
	/// <summary>
	/// Strongly typed enumeration Accessor.
	/// </summary>
	public enum Accessor
	{
		/// <summary>
		/// Strongly typed for value READ_ONLY.
		/// </summary>
		ReadOnly = VX.READ_ONLY,

		/// <summary>
		/// Strongly typed for value WRITE_ONLY.
		/// </summary>
		WriteOnly = VX.WRITE_ONLY,

		/// <summary>
		/// Strongly typed for value READ_AND_WRITE.
		/// </summary>
		ReadAndWrite = VX.READ_AND_WRITE,

	}

	/// <summary>
	/// Strongly typed enumeration Action.
	/// </summary>
	public enum Action
	{
		/// <summary>
		/// Strongly typed for value ACTION_CONTINUE.
		/// </summary>
		ActionContinue = VX.ACTION_CONTINUE,

		/// <summary>
		/// Strongly typed for value ACTION_ABANDON.
		/// </summary>
		ActionAbandon = VX.ACTION_ABANDON,

	}

	/// <summary>
	/// Strongly typed enumeration ArrayAttribute.
	/// </summary>
	public enum ArrayAttribute
	{
		/// <summary>
		/// Strongly typed for value ARRAY_ITEMTYPE.
		/// </summary>
		ArrayItemtype = VX.ARRAY_ITEMTYPE,

		/// <summary>
		/// Strongly typed for value ARRAY_NUMITEMS.
		/// </summary>
		ArrayNumitems = VX.ARRAY_NUMITEMS,

		/// <summary>
		/// Strongly typed for value ARRAY_CAPACITY.
		/// </summary>
		ArrayCapacity = VX.ARRAY_CAPACITY,

		/// <summary>
		/// Strongly typed for value ARRAY_ITEMSIZE.
		/// </summary>
		ArrayItemsize = VX.ARRAY_ITEMSIZE,

	}

	/// <summary>
	/// Strongly typed enumeration Bool.
	/// </summary>
	public enum Bool
	{
		/// <summary>
		/// Strongly typed for value vx_false_e.
		/// </summary>
		VxFalseE = VX.vx_false_e,

	}

	/// <summary>
	/// Strongly typed enumeration Border.
	/// </summary>
	public enum Border
	{
		/// <summary>
		/// Strongly typed for value BORDER_UNDEFINED.
		/// </summary>
		BorderUndefined = VX.BORDER_UNDEFINED,

		/// <summary>
		/// Strongly typed for value BORDER_CONSTANT.
		/// </summary>
		BorderConstant = VX.BORDER_CONSTANT,

		/// <summary>
		/// Strongly typed for value BORDER_REPLICATE.
		/// </summary>
		BorderReplicate = VX.BORDER_REPLICATE,

	}

	/// <summary>
	/// Strongly typed enumeration BorderPolicy.
	/// </summary>
	public enum BorderPolicy
	{
		/// <summary>
		/// Strongly typed for value BORDER_POLICY_DEFAULT_TO_UNDEFINED.
		/// </summary>
		BorderPolicyDefaultToUndefined = VX.BORDER_POLICY_DEFAULT_TO_UNDEFINED,

		/// <summary>
		/// Strongly typed for value BORDER_POLICY_RETURN_ERROR.
		/// </summary>
		BorderPolicyReturnError = VX.BORDER_POLICY_RETURN_ERROR,

	}

	/// <summary>
	/// Strongly typed enumeration Channel.
	/// </summary>
	public enum Channel
	{
		/// <summary>
		/// Strongly typed for value CHANNEL_0.
		/// </summary>
		Channel0 = VX.CHANNEL_0,

		/// <summary>
		/// Strongly typed for value CHANNEL_1.
		/// </summary>
		Channel1 = VX.CHANNEL_1,

		/// <summary>
		/// Strongly typed for value CHANNEL_2.
		/// </summary>
		Channel2 = VX.CHANNEL_2,

		/// <summary>
		/// Strongly typed for value CHANNEL_3.
		/// </summary>
		Channel3 = VX.CHANNEL_3,

		/// <summary>
		/// Strongly typed for value CHANNEL_R.
		/// </summary>
		ChannelR = VX.CHANNEL_R,

		/// <summary>
		/// Strongly typed for value CHANNEL_G.
		/// </summary>
		ChannelG = VX.CHANNEL_G,

		/// <summary>
		/// Strongly typed for value CHANNEL_B.
		/// </summary>
		ChannelB = VX.CHANNEL_B,

		/// <summary>
		/// Strongly typed for value CHANNEL_A.
		/// </summary>
		ChannelA = VX.CHANNEL_A,

		/// <summary>
		/// Strongly typed for value CHANNEL_Y.
		/// </summary>
		ChannelY = VX.CHANNEL_Y,

		/// <summary>
		/// Strongly typed for value CHANNEL_U.
		/// </summary>
		ChannelU = VX.CHANNEL_U,

		/// <summary>
		/// Strongly typed for value CHANNEL_V.
		/// </summary>
		ChannelV = VX.CHANNEL_V,

	}

	/// <summary>
	/// Strongly typed enumeration ChannelRange.
	/// </summary>
	public enum ChannelRange
	{
		/// <summary>
		/// Strongly typed for value CHANNEL_RANGE_FULL.
		/// </summary>
		ChannelRangeFull = VX.CHANNEL_RANGE_FULL,

		/// <summary>
		/// Strongly typed for value CHANNEL_RANGE_RESTRICTED.
		/// </summary>
		ChannelRangeRestricted = VX.CHANNEL_RANGE_RESTRICTED,

	}

	/// <summary>
	/// Strongly typed enumeration ColorSpace.
	/// </summary>
	public enum ColorSpace
	{
		/// <summary>
		/// Strongly typed for value COLOR_SPACE_NONE.
		/// </summary>
		ColorSpaceNone = VX.COLOR_SPACE_NONE,

		/// <summary>
		/// Strongly typed for value COLOR_SPACE_BT601_525.
		/// </summary>
		ColorSpaceBt601525 = VX.COLOR_SPACE_BT601_525,

		/// <summary>
		/// Strongly typed for value COLOR_SPACE_BT601_625.
		/// </summary>
		ColorSpaceBt601625 = VX.COLOR_SPACE_BT601_625,

		/// <summary>
		/// Strongly typed for value COLOR_SPACE_BT709.
		/// </summary>
		ColorSpaceBt709 = VX.COLOR_SPACE_BT709,

		/// <summary>
		/// Strongly typed for value COLOR_SPACE_DEFAULT.
		/// </summary>
		ColorSpaceDefault = VX.COLOR_SPACE_DEFAULT,

	}

	/// <summary>
	/// Strongly typed enumeration ContextAttribute.
	/// </summary>
	public enum ContextAttribute
	{
		/// <summary>
		/// Strongly typed for value CONTEXT_VENDOR_ID.
		/// </summary>
		ContextVendorId = VX.CONTEXT_VENDOR_ID,

		/// <summary>
		/// Strongly typed for value CONTEXT_VERSION.
		/// </summary>
		ContextVersion = VX.CONTEXT_VERSION,

		/// <summary>
		/// Strongly typed for value CONTEXT_UNIQUE_KERNELS.
		/// </summary>
		ContextUniqueKernels = VX.CONTEXT_UNIQUE_KERNELS,

		/// <summary>
		/// Strongly typed for value CONTEXT_MODULES.
		/// </summary>
		ContextModules = VX.CONTEXT_MODULES,

		/// <summary>
		/// Strongly typed for value CONTEXT_REFERENCES.
		/// </summary>
		ContextReferences = VX.CONTEXT_REFERENCES,

		/// <summary>
		/// Strongly typed for value CONTEXT_IMPLEMENTATION.
		/// </summary>
		ContextImplementation = VX.CONTEXT_IMPLEMENTATION,

		/// <summary>
		/// Strongly typed for value CONTEXT_EXTENSIONS_SIZE.
		/// </summary>
		ContextExtensionsSize = VX.CONTEXT_EXTENSIONS_SIZE,

		/// <summary>
		/// Strongly typed for value CONTEXT_EXTENSIONS.
		/// </summary>
		ContextExtensions = VX.CONTEXT_EXTENSIONS,

		/// <summary>
		/// Strongly typed for value CONTEXT_CONVOLUTION_MAX_DIMENSION.
		/// </summary>
		ContextConvolutionMaxDimension = VX.CONTEXT_CONVOLUTION_MAX_DIMENSION,

		/// <summary>
		/// Strongly typed for value CONTEXT_OPTICAL_FLOW_MAX_WINDOW_DIMENSION.
		/// </summary>
		ContextOpticalFlowMaxWindowDimension = VX.CONTEXT_OPTICAL_FLOW_MAX_WINDOW_DIMENSION,

		/// <summary>
		/// Strongly typed for value CONTEXT_IMMEDIATE_BORDER.
		/// </summary>
		ContextImmediateBorder = VX.CONTEXT_IMMEDIATE_BORDER,

		/// <summary>
		/// Strongly typed for value CONTEXT_UNIQUE_KERNEL_TABLE.
		/// </summary>
		ContextUniqueKernelTable = VX.CONTEXT_UNIQUE_KERNEL_TABLE,

		/// <summary>
		/// Strongly typed for value CONTEXT_IMMEDIATE_BORDER_POLICY.
		/// </summary>
		ContextImmediateBorderPolicy = VX.CONTEXT_IMMEDIATE_BORDER_POLICY,

		/// <summary>
		/// Strongly typed for value CONTEXT_NONLINEAR_MAX_DIMENSION.
		/// </summary>
		ContextNonlinearMaxDimension = VX.CONTEXT_NONLINEAR_MAX_DIMENSION,

	}

	/// <summary>
	/// Strongly typed enumeration ConvertPolicy.
	/// </summary>
	public enum ConvertPolicy
	{
		/// <summary>
		/// Strongly typed for value CONVERT_POLICY_WRAP.
		/// </summary>
		ConvertPolicyWrap = VX.CONVERT_POLICY_WRAP,

		/// <summary>
		/// Strongly typed for value CONVERT_POLICY_SATURATE.
		/// </summary>
		ConvertPolicySaturate = VX.CONVERT_POLICY_SATURATE,

	}

	/// <summary>
	/// Strongly typed enumeration ConvolutionAttribute.
	/// </summary>
	public enum ConvolutionAttribute
	{
		/// <summary>
		/// Strongly typed for value CONVOLUTION_ROWS.
		/// </summary>
		ConvolutionRows = VX.CONVOLUTION_ROWS,

		/// <summary>
		/// Strongly typed for value CONVOLUTION_COLUMNS.
		/// </summary>
		ConvolutionColumns = VX.CONVOLUTION_COLUMNS,

		/// <summary>
		/// Strongly typed for value CONVOLUTION_SCALE.
		/// </summary>
		ConvolutionScale = VX.CONVOLUTION_SCALE,

		/// <summary>
		/// Strongly typed for value CONVOLUTION_SIZE.
		/// </summary>
		ConvolutionSize = VX.CONVOLUTION_SIZE,

	}

	/// <summary>
	/// Strongly typed enumeration DelayAttribute.
	/// </summary>
	public enum DelayAttribute
	{
		/// <summary>
		/// Strongly typed for value DELAY_TYPE.
		/// </summary>
		DelayType = VX.DELAY_TYPE,

		/// <summary>
		/// Strongly typed for value DELAY_SLOTS.
		/// </summary>
		DelaySlots = VX.DELAY_SLOTS,

	}

	/// <summary>
	/// Strongly typed enumeration DfImage.
	/// </summary>
	public enum DfImage
	{
		/// <summary>
		/// Strongly typed for value DF_IMAGE_VIRT.
		/// </summary>
		DfImageVirt = VX.DF_IMAGE_VIRT,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_RGB.
		/// </summary>
		DfImageRgb = VX.DF_IMAGE_RGB,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_RGBX.
		/// </summary>
		DfImageRgbx = VX.DF_IMAGE_RGBX,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_NV12.
		/// </summary>
		DfImageNv12 = VX.DF_IMAGE_NV12,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_NV21.
		/// </summary>
		DfImageNv21 = VX.DF_IMAGE_NV21,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_UYVY.
		/// </summary>
		DfImageUyvy = VX.DF_IMAGE_UYVY,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_YUYV.
		/// </summary>
		DfImageYuyv = VX.DF_IMAGE_YUYV,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_IYUV.
		/// </summary>
		DfImageIyuv = VX.DF_IMAGE_IYUV,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_YUV4.
		/// </summary>
		DfImageYuv4 = VX.DF_IMAGE_YUV4,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_U8.
		/// </summary>
		DfImageU8 = VX.DF_IMAGE_U8,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_U16.
		/// </summary>
		DfImageU16 = VX.DF_IMAGE_U16,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_S16.
		/// </summary>
		DfImageS16 = VX.DF_IMAGE_S16,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_U32.
		/// </summary>
		DfImageU32 = VX.DF_IMAGE_U32,

		/// <summary>
		/// Strongly typed for value DF_IMAGE_S32.
		/// </summary>
		DfImageS32 = VX.DF_IMAGE_S32,

	}

	/// <summary>
	/// Strongly typed enumeration Direction.
	/// </summary>
	public enum Direction
	{
		/// <summary>
		/// Strongly typed for value INPUT.
		/// </summary>
		Input = VX.INPUT,

		/// <summary>
		/// Strongly typed for value OUTPUT.
		/// </summary>
		Output = VX.OUTPUT,

		/// <summary>
		/// Strongly typed for value BIDIRECTIONAL.
		/// </summary>
		Bidirectional = VX.BIDIRECTIONAL,

	}

	/// <summary>
	/// Strongly typed enumeration Directive.
	/// </summary>
	public enum Directive
	{
		/// <summary>
		/// Strongly typed for value DIRECTIVE_DISABLE_LOGGING.
		/// </summary>
		DirectiveDisableLogging = VX.DIRECTIVE_DISABLE_LOGGING,

		/// <summary>
		/// Strongly typed for value DIRECTIVE_ENABLE_LOGGING.
		/// </summary>
		DirectiveEnableLogging = VX.DIRECTIVE_ENABLE_LOGGING,

		/// <summary>
		/// Strongly typed for value DIRECTIVE_DISABLE_PERFORMANCE.
		/// </summary>
		DirectiveDisablePerformance = VX.DIRECTIVE_DISABLE_PERFORMANCE,

		/// <summary>
		/// Strongly typed for value DIRECTIVE_ENABLE_PERFORMANCE.
		/// </summary>
		DirectiveEnablePerformance = VX.DIRECTIVE_ENABLE_PERFORMANCE,

	}

	/// <summary>
	/// Strongly typed enumeration DistributionAttribute.
	/// </summary>
	public enum DistributionAttribute
	{
		/// <summary>
		/// Strongly typed for value DISTRIBUTION_DIMENSIONS.
		/// </summary>
		DistributionDimensions = VX.DISTRIBUTION_DIMENSIONS,

		/// <summary>
		/// Strongly typed for value DISTRIBUTION_OFFSET.
		/// </summary>
		DistributionOffset = VX.DISTRIBUTION_OFFSET,

		/// <summary>
		/// Strongly typed for value DISTRIBUTION_RANGE.
		/// </summary>
		DistributionRange = VX.DISTRIBUTION_RANGE,

		/// <summary>
		/// Strongly typed for value DISTRIBUTION_BINS.
		/// </summary>
		DistributionBins = VX.DISTRIBUTION_BINS,

		/// <summary>
		/// Strongly typed for value DISTRIBUTION_WINDOW.
		/// </summary>
		DistributionWindow = VX.DISTRIBUTION_WINDOW,

		/// <summary>
		/// Strongly typed for value DISTRIBUTION_SIZE.
		/// </summary>
		DistributionSize = VX.DISTRIBUTION_SIZE,

	}

	/// <summary>
	/// Strongly typed enumeration Enum.
	/// </summary>
	public enum Enum
	{
		/// <summary>
		/// Strongly typed for value ENUM_DIRECTION.
		/// </summary>
		EnumDirection = VX.ENUM_DIRECTION,

		/// <summary>
		/// Strongly typed for value ENUM_ACTION.
		/// </summary>
		EnumAction = VX.ENUM_ACTION,

		/// <summary>
		/// Strongly typed for value ENUM_HINT.
		/// </summary>
		EnumHint = VX.ENUM_HINT,

		/// <summary>
		/// Strongly typed for value ENUM_DIRECTIVE.
		/// </summary>
		EnumDirective = VX.ENUM_DIRECTIVE,

		/// <summary>
		/// Strongly typed for value ENUM_INTERPOLATION.
		/// </summary>
		EnumInterpolation = VX.ENUM_INTERPOLATION,

		/// <summary>
		/// Strongly typed for value ENUM_OVERFLOW.
		/// </summary>
		EnumOverflow = VX.ENUM_OVERFLOW,

		/// <summary>
		/// Strongly typed for value ENUM_COLOR_SPACE.
		/// </summary>
		EnumColorSpace = VX.ENUM_COLOR_SPACE,

		/// <summary>
		/// Strongly typed for value ENUM_COLOR_RANGE.
		/// </summary>
		EnumColorRange = VX.ENUM_COLOR_RANGE,

		/// <summary>
		/// Strongly typed for value ENUM_PARAMETER_STATE.
		/// </summary>
		EnumParameterState = VX.ENUM_PARAMETER_STATE,

		/// <summary>
		/// Strongly typed for value ENUM_CHANNEL.
		/// </summary>
		EnumChannel = VX.ENUM_CHANNEL,

		/// <summary>
		/// Strongly typed for value ENUM_CONVERT_POLICY.
		/// </summary>
		EnumConvertPolicy = VX.ENUM_CONVERT_POLICY,

		/// <summary>
		/// Strongly typed for value ENUM_THRESHOLD_TYPE.
		/// </summary>
		EnumThresholdType = VX.ENUM_THRESHOLD_TYPE,

		/// <summary>
		/// Strongly typed for value ENUM_BORDER.
		/// </summary>
		EnumBorder = VX.ENUM_BORDER,

		/// <summary>
		/// Strongly typed for value ENUM_COMPARISON.
		/// </summary>
		EnumComparison = VX.ENUM_COMPARISON,

		/// <summary>
		/// Strongly typed for value ENUM_MEMORY_TYPE.
		/// </summary>
		EnumMemoryType = VX.ENUM_MEMORY_TYPE,

		/// <summary>
		/// Strongly typed for value ENUM_TERM_CRITERIA.
		/// </summary>
		EnumTermCriteria = VX.ENUM_TERM_CRITERIA,

		/// <summary>
		/// Strongly typed for value ENUM_NORM_TYPE.
		/// </summary>
		EnumNormType = VX.ENUM_NORM_TYPE,

		/// <summary>
		/// Strongly typed for value ENUM_ACCESSOR.
		/// </summary>
		EnumAccessor = VX.ENUM_ACCESSOR,

		/// <summary>
		/// Strongly typed for value ENUM_ROUND_POLICY.
		/// </summary>
		EnumRoundPolicy = VX.ENUM_ROUND_POLICY,

		/// <summary>
		/// Strongly typed for value ENUM_TARGET.
		/// </summary>
		EnumTarget = VX.ENUM_TARGET,

		/// <summary>
		/// Strongly typed for value ENUM_BORDER_POLICY.
		/// </summary>
		EnumBorderPolicy = VX.ENUM_BORDER_POLICY,

		/// <summary>
		/// Strongly typed for value ENUM_GRAPH_STATE.
		/// </summary>
		EnumGraphState = VX.ENUM_GRAPH_STATE,

		/// <summary>
		/// Strongly typed for value ENUM_NONLINEAR.
		/// </summary>
		EnumNonlinear = VX.ENUM_NONLINEAR,

		/// <summary>
		/// Strongly typed for value ENUM_PATTERN.
		/// </summary>
		EnumPattern = VX.ENUM_PATTERN,

	}

	/// <summary>
	/// Strongly typed enumeration GraphAttribute.
	/// </summary>
	public enum GraphAttribute
	{
		/// <summary>
		/// Strongly typed for value GRAPH_NUMNODES.
		/// </summary>
		GraphNumnodes = VX.GRAPH_NUMNODES,

		/// <summary>
		/// Strongly typed for value GRAPH_PERFORMANCE.
		/// </summary>
		GraphPerformance = VX.GRAPH_PERFORMANCE,

		/// <summary>
		/// Strongly typed for value GRAPH_NUMPARAMETERS.
		/// </summary>
		GraphNumparameters = VX.GRAPH_NUMPARAMETERS,

		/// <summary>
		/// Strongly typed for value GRAPH_STATE.
		/// </summary>
		GraphState = VX.GRAPH_STATE,

	}

	/// <summary>
	/// Strongly typed enumeration GraphState.
	/// </summary>
	public enum GraphState
	{
		/// <summary>
		/// Strongly typed for value GRAPH_STATE_UNVERIFIED.
		/// </summary>
		GraphStateUnverified = VX.GRAPH_STATE_UNVERIFIED,

		/// <summary>
		/// Strongly typed for value GRAPH_STATE_VERIFIED.
		/// </summary>
		GraphStateVerified = VX.GRAPH_STATE_VERIFIED,

		/// <summary>
		/// Strongly typed for value GRAPH_STATE_RUNNING.
		/// </summary>
		GraphStateRunning = VX.GRAPH_STATE_RUNNING,

		/// <summary>
		/// Strongly typed for value GRAPH_STATE_ABANDONED.
		/// </summary>
		GraphStateAbandoned = VX.GRAPH_STATE_ABANDONED,

		/// <summary>
		/// Strongly typed for value GRAPH_STATE_COMPLETED.
		/// </summary>
		GraphStateCompleted = VX.GRAPH_STATE_COMPLETED,

	}

	/// <summary>
	/// Strongly typed enumeration Hint.
	/// </summary>
	public enum Hint
	{
		/// <summary>
		/// Strongly typed for value HINT_PERFORMANCE_DEFAULT.
		/// </summary>
		HintPerformanceDefault = VX.HINT_PERFORMANCE_DEFAULT,

		/// <summary>
		/// Strongly typed for value HINT_PERFORMANCE_LOW_POWER.
		/// </summary>
		HintPerformanceLowPower = VX.HINT_PERFORMANCE_LOW_POWER,

		/// <summary>
		/// Strongly typed for value HINT_PERFORMANCE_HIGH_SPEED.
		/// </summary>
		HintPerformanceHighSpeed = VX.HINT_PERFORMANCE_HIGH_SPEED,

	}

	/// <summary>
	/// Strongly typed enumeration ImageAttribute.
	/// </summary>
	public enum ImageAttribute
	{
		/// <summary>
		/// Strongly typed for value IMAGE_WIDTH.
		/// </summary>
		ImageWidth = VX.IMAGE_WIDTH,

		/// <summary>
		/// Strongly typed for value IMAGE_HEIGHT.
		/// </summary>
		ImageHeight = VX.IMAGE_HEIGHT,

		/// <summary>
		/// Strongly typed for value IMAGE_FORMAT.
		/// </summary>
		ImageFormat = VX.IMAGE_FORMAT,

		/// <summary>
		/// Strongly typed for value IMAGE_PLANES.
		/// </summary>
		ImagePlanes = VX.IMAGE_PLANES,

		/// <summary>
		/// Strongly typed for value IMAGE_SPACE.
		/// </summary>
		ImageSpace = VX.IMAGE_SPACE,

		/// <summary>
		/// Strongly typed for value IMAGE_RANGE.
		/// </summary>
		ImageRange = VX.IMAGE_RANGE,

		/// <summary>
		/// Strongly typed for value IMAGE_SIZE.
		/// </summary>
		ImageSize = VX.IMAGE_SIZE,

		/// <summary>
		/// Strongly typed for value IMAGE_MEMORY_TYPE.
		/// </summary>
		ImageMemoryType = VX.IMAGE_MEMORY_TYPE,

	}

	/// <summary>
	/// Strongly typed enumeration InterpolationType.
	/// </summary>
	public enum InterpolationType
	{
		/// <summary>
		/// Strongly typed for value INTERPOLATION_NEAREST_NEIGHBOR.
		/// </summary>
		InterpolationNearestNeighbor = VX.INTERPOLATION_NEAREST_NEIGHBOR,

		/// <summary>
		/// Strongly typed for value INTERPOLATION_BILINEAR.
		/// </summary>
		InterpolationBilinear = VX.INTERPOLATION_BILINEAR,

		/// <summary>
		/// Strongly typed for value INTERPOLATION_AREA.
		/// </summary>
		InterpolationArea = VX.INTERPOLATION_AREA,

	}

	/// <summary>
	/// Strongly typed enumeration Kernel.
	/// </summary>
	public enum Kernel
	{
		/// <summary>
		/// Strongly typed for value KERNEL_COLOR_CONVERT.
		/// </summary>
		KernelColorConvert = VX.KERNEL_COLOR_CONVERT,

		/// <summary>
		/// Strongly typed for value KERNEL_CHANNEL_EXTRACT.
		/// </summary>
		KernelChannelExtract = VX.KERNEL_CHANNEL_EXTRACT,

		/// <summary>
		/// Strongly typed for value KERNEL_CHANNEL_COMBINE.
		/// </summary>
		KernelChannelCombine = VX.KERNEL_CHANNEL_COMBINE,

		/// <summary>
		/// Strongly typed for value KERNEL_SOBEL_3x3.
		/// </summary>
		KernelSobel3x3 = VX.KERNEL_SOBEL_3x3,

		/// <summary>
		/// Strongly typed for value KERNEL_MAGNITUDE.
		/// </summary>
		KernelMagnitude = VX.KERNEL_MAGNITUDE,

		/// <summary>
		/// Strongly typed for value KERNEL_PHASE.
		/// </summary>
		KernelPhase = VX.KERNEL_PHASE,

		/// <summary>
		/// Strongly typed for value KERNEL_SCALE_IMAGE.
		/// </summary>
		KernelScaleImage = VX.KERNEL_SCALE_IMAGE,

		/// <summary>
		/// Strongly typed for value KERNEL_TABLE_LOOKUP.
		/// </summary>
		KernelTableLookup = VX.KERNEL_TABLE_LOOKUP,

		/// <summary>
		/// Strongly typed for value KERNEL_HISTOGRAM.
		/// </summary>
		KernelHistogram = VX.KERNEL_HISTOGRAM,

		/// <summary>
		/// Strongly typed for value KERNEL_EQUALIZE_HISTOGRAM.
		/// </summary>
		KernelEqualizeHistogram = VX.KERNEL_EQUALIZE_HISTOGRAM,

		/// <summary>
		/// Strongly typed for value KERNEL_ABSDIFF.
		/// </summary>
		KernelAbsdiff = VX.KERNEL_ABSDIFF,

		/// <summary>
		/// Strongly typed for value KERNEL_MEAN_STDDEV.
		/// </summary>
		KernelMeanStddev = VX.KERNEL_MEAN_STDDEV,

		/// <summary>
		/// Strongly typed for value KERNEL_THRESHOLD.
		/// </summary>
		KernelThreshold = VX.KERNEL_THRESHOLD,

		/// <summary>
		/// Strongly typed for value KERNEL_INTEGRAL_IMAGE.
		/// </summary>
		KernelIntegralImage = VX.KERNEL_INTEGRAL_IMAGE,

		/// <summary>
		/// Strongly typed for value KERNEL_DILATE_3x3.
		/// </summary>
		KernelDilate3x3 = VX.KERNEL_DILATE_3x3,

		/// <summary>
		/// Strongly typed for value KERNEL_ERODE_3x3.
		/// </summary>
		KernelErode3x3 = VX.KERNEL_ERODE_3x3,

		/// <summary>
		/// Strongly typed for value KERNEL_MEDIAN_3x3.
		/// </summary>
		KernelMedian3x3 = VX.KERNEL_MEDIAN_3x3,

		/// <summary>
		/// Strongly typed for value KERNEL_BOX_3x3.
		/// </summary>
		KernelBox3x3 = VX.KERNEL_BOX_3x3,

		/// <summary>
		/// Strongly typed for value KERNEL_GAUSSIAN_3x3.
		/// </summary>
		KernelGaussian3x3 = VX.KERNEL_GAUSSIAN_3x3,

		/// <summary>
		/// Strongly typed for value KERNEL_CUSTOM_CONVOLUTION.
		/// </summary>
		KernelCustomConvolution = VX.KERNEL_CUSTOM_CONVOLUTION,

		/// <summary>
		/// Strongly typed for value KERNEL_GAUSSIAN_PYRAMID.
		/// </summary>
		KernelGaussianPyramid = VX.KERNEL_GAUSSIAN_PYRAMID,

		/// <summary>
		/// Strongly typed for value KERNEL_ACCUMULATE.
		/// </summary>
		KernelAccumulate = VX.KERNEL_ACCUMULATE,

		/// <summary>
		/// Strongly typed for value KERNEL_ACCUMULATE_WEIGHTED.
		/// </summary>
		KernelAccumulateWeighted = VX.KERNEL_ACCUMULATE_WEIGHTED,

		/// <summary>
		/// Strongly typed for value KERNEL_ACCUMULATE_SQUARE.
		/// </summary>
		KernelAccumulateSquare = VX.KERNEL_ACCUMULATE_SQUARE,

		/// <summary>
		/// Strongly typed for value KERNEL_MINMAXLOC.
		/// </summary>
		KernelMinmaxloc = VX.KERNEL_MINMAXLOC,

		/// <summary>
		/// Strongly typed for value KERNEL_CONVERTDEPTH.
		/// </summary>
		KernelConvertdepth = VX.KERNEL_CONVERTDEPTH,

		/// <summary>
		/// Strongly typed for value KERNEL_CANNY_EDGE_DETECTOR.
		/// </summary>
		KernelCannyEdgeDetector = VX.KERNEL_CANNY_EDGE_DETECTOR,

		/// <summary>
		/// Strongly typed for value KERNEL_AND.
		/// </summary>
		KernelAnd = VX.KERNEL_AND,

		/// <summary>
		/// Strongly typed for value KERNEL_OR.
		/// </summary>
		KernelOr = VX.KERNEL_OR,

		/// <summary>
		/// Strongly typed for value KERNEL_XOR.
		/// </summary>
		KernelXor = VX.KERNEL_XOR,

		/// <summary>
		/// Strongly typed for value KERNEL_NOT.
		/// </summary>
		KernelNot = VX.KERNEL_NOT,

		/// <summary>
		/// Strongly typed for value KERNEL_MULTIPLY.
		/// </summary>
		KernelMultiply = VX.KERNEL_MULTIPLY,

		/// <summary>
		/// Strongly typed for value KERNEL_ADD.
		/// </summary>
		KernelAdd = VX.KERNEL_ADD,

		/// <summary>
		/// Strongly typed for value KERNEL_SUBTRACT.
		/// </summary>
		KernelSubtract = VX.KERNEL_SUBTRACT,

		/// <summary>
		/// Strongly typed for value KERNEL_WARP_AFFINE.
		/// </summary>
		KernelWarpAffine = VX.KERNEL_WARP_AFFINE,

		/// <summary>
		/// Strongly typed for value KERNEL_WARP_PERSPECTIVE.
		/// </summary>
		KernelWarpPerspective = VX.KERNEL_WARP_PERSPECTIVE,

		/// <summary>
		/// Strongly typed for value KERNEL_HARRIS_CORNERS.
		/// </summary>
		KernelHarrisCorners = VX.KERNEL_HARRIS_CORNERS,

		/// <summary>
		/// Strongly typed for value KERNEL_FAST_CORNERS.
		/// </summary>
		KernelFastCorners = VX.KERNEL_FAST_CORNERS,

		/// <summary>
		/// Strongly typed for value KERNEL_OPTICAL_FLOW_PYR_LK.
		/// </summary>
		KernelOpticalFlowPyrLk = VX.KERNEL_OPTICAL_FLOW_PYR_LK,

		/// <summary>
		/// Strongly typed for value KERNEL_REMAP.
		/// </summary>
		KernelRemap = VX.KERNEL_REMAP,

		/// <summary>
		/// Strongly typed for value KERNEL_HALFSCALE_GAUSSIAN.
		/// </summary>
		KernelHalfscaleGaussian = VX.KERNEL_HALFSCALE_GAUSSIAN,

		/// <summary>
		/// Strongly typed for value KERNEL_LAPLACIAN_PYRAMID.
		/// </summary>
		KernelLaplacianPyramid = VX.KERNEL_LAPLACIAN_PYRAMID,

		/// <summary>
		/// Strongly typed for value KERNEL_LAPLACIAN_RECONSTRUCT.
		/// </summary>
		KernelLaplacianReconstruct = VX.KERNEL_LAPLACIAN_RECONSTRUCT,

		/// <summary>
		/// Strongly typed for value KERNEL_NON_LINEAR_FILTER.
		/// </summary>
		KernelNonLinearFilter = VX.KERNEL_NON_LINEAR_FILTER,

	}

	/// <summary>
	/// Strongly typed enumeration KernelAttribute.
	/// </summary>
	public enum KernelAttribute
	{
		/// <summary>
		/// Strongly typed for value KERNEL_PARAMETERS.
		/// </summary>
		KernelParameters = VX.KERNEL_PARAMETERS,

		/// <summary>
		/// Strongly typed for value KERNEL_NAME.
		/// </summary>
		KernelName = VX.KERNEL_NAME,

		/// <summary>
		/// Strongly typed for value KERNEL_ENUM.
		/// </summary>
		KernelEnum = VX.KERNEL_ENUM,

		/// <summary>
		/// Strongly typed for value KERNEL_LOCAL_DATA_SIZE.
		/// </summary>
		KernelLocalDataSize = VX.KERNEL_LOCAL_DATA_SIZE,

	}

	/// <summary>
	/// Strongly typed enumeration Library.
	/// </summary>
	public enum Library
	{
		/// <summary>
		/// Strongly typed for value LIBRARY_KHR_BASE.
		/// </summary>
		LibraryKhrBase = VX.LIBRARY_KHR_BASE,

	}

	/// <summary>
	/// Strongly typed enumeration LutAttribute.
	/// </summary>
	public enum LutAttribute
	{
		/// <summary>
		/// Strongly typed for value LUT_TYPE.
		/// </summary>
		LutType = VX.LUT_TYPE,

		/// <summary>
		/// Strongly typed for value LUT_COUNT.
		/// </summary>
		LutCount = VX.LUT_COUNT,

		/// <summary>
		/// Strongly typed for value LUT_SIZE.
		/// </summary>
		LutSize = VX.LUT_SIZE,

		/// <summary>
		/// Strongly typed for value LUT_OFFSET.
		/// </summary>
		LutOffset = VX.LUT_OFFSET,

	}

	/// <summary>
	/// Strongly typed enumeration MapFlag.
	/// </summary>
	public enum MapFlag
	{
		/// <summary>
		/// Strongly typed for value NOGAP_X.
		/// </summary>
		NogapX = VX.NOGAP_X,

	}

	/// <summary>
	/// Strongly typed enumeration MatrixAttribute.
	/// </summary>
	public enum MatrixAttribute
	{
		/// <summary>
		/// Strongly typed for value MATRIX_TYPE.
		/// </summary>
		MatrixType = VX.MATRIX_TYPE,

		/// <summary>
		/// Strongly typed for value MATRIX_ROWS.
		/// </summary>
		MatrixRows = VX.MATRIX_ROWS,

		/// <summary>
		/// Strongly typed for value MATRIX_COLUMNS.
		/// </summary>
		MatrixColumns = VX.MATRIX_COLUMNS,

		/// <summary>
		/// Strongly typed for value MATRIX_SIZE.
		/// </summary>
		MatrixSize = VX.MATRIX_SIZE,

		/// <summary>
		/// Strongly typed for value MATRIX_ORIGIN.
		/// </summary>
		MatrixOrigin = VX.MATRIX_ORIGIN,

		/// <summary>
		/// Strongly typed for value MATRIX_PATTERN.
		/// </summary>
		MatrixPattern = VX.MATRIX_PATTERN,

	}

	/// <summary>
	/// Strongly typed enumeration MemoryType.
	/// </summary>
	public enum MemoryType
	{
		/// <summary>
		/// Strongly typed for value MEMORY_TYPE_NONE.
		/// </summary>
		MemoryTypeNone = VX.MEMORY_TYPE_NONE,

		/// <summary>
		/// Strongly typed for value MEMORY_TYPE_HOST.
		/// </summary>
		MemoryTypeHost = VX.MEMORY_TYPE_HOST,

	}

	/// <summary>
	/// Strongly typed enumeration MetaValidRectAttribute.
	/// </summary>
	public enum MetaValidRectAttribute
	{
		/// <summary>
		/// Strongly typed for value VALID_RECT_CALLBACK.
		/// </summary>
		ValidRectCallback = VX.VALID_RECT_CALLBACK,

	}

	/// <summary>
	/// Strongly typed enumeration NodeAttribute.
	/// </summary>
	public enum NodeAttribute
	{
		/// <summary>
		/// Strongly typed for value NODE_STATUS.
		/// </summary>
		NodeStatus = VX.NODE_STATUS,

		/// <summary>
		/// Strongly typed for value NODE_PERFORMANCE.
		/// </summary>
		NodePerformance = VX.NODE_PERFORMANCE,

		/// <summary>
		/// Strongly typed for value NODE_BORDER.
		/// </summary>
		NodeBorder = VX.NODE_BORDER,

		/// <summary>
		/// Strongly typed for value NODE_LOCAL_DATA_SIZE.
		/// </summary>
		NodeLocalDataSize = VX.NODE_LOCAL_DATA_SIZE,

		/// <summary>
		/// Strongly typed for value NODE_LOCAL_DATA_PTR.
		/// </summary>
		NodeLocalDataPtr = VX.NODE_LOCAL_DATA_PTR,

		/// <summary>
		/// Strongly typed for value NODE_PARAMETERS.
		/// </summary>
		NodeParameters = VX.NODE_PARAMETERS,

		/// <summary>
		/// Strongly typed for value NODE_IS_REPLICATED.
		/// </summary>
		NodeIsReplicated = VX.NODE_IS_REPLICATED,

		/// <summary>
		/// Strongly typed for value NODE_REPLICATE_FLAGS.
		/// </summary>
		NodeReplicateFlags = VX.NODE_REPLICATE_FLAGS,

		/// <summary>
		/// Strongly typed for value NODE_VALID_RECT_RESET.
		/// </summary>
		NodeValidRectReset = VX.NODE_VALID_RECT_RESET,

	}

	/// <summary>
	/// Strongly typed enumeration NonLinearFilter.
	/// </summary>
	public enum NonLinearFilter
	{
		/// <summary>
		/// Strongly typed for value NONLINEAR_FILTER_MEDIAN.
		/// </summary>
		NonlinearFilterMedian = VX.NONLINEAR_FILTER_MEDIAN,

		/// <summary>
		/// Strongly typed for value NONLINEAR_FILTER_MIN.
		/// </summary>
		NonlinearFilterMin = VX.NONLINEAR_FILTER_MIN,

		/// <summary>
		/// Strongly typed for value NONLINEAR_FILTER_MAX.
		/// </summary>
		NonlinearFilterMax = VX.NONLINEAR_FILTER_MAX,

	}

	/// <summary>
	/// Strongly typed enumeration NormType.
	/// </summary>
	public enum NormType
	{
		/// <summary>
		/// Strongly typed for value NORM_L1.
		/// </summary>
		NormL1 = VX.NORM_L1,

		/// <summary>
		/// Strongly typed for value NORM_L2.
		/// </summary>
		NormL2 = VX.NORM_L2,

	}

	/// <summary>
	/// Strongly typed enumeration ObjectArrayAttribute.
	/// </summary>
	public enum ObjectArrayAttribute
	{
		/// <summary>
		/// Strongly typed for value OBJECT_ARRAY_ITEMTYPE.
		/// </summary>
		ObjectArrayItemtype = VX.OBJECT_ARRAY_ITEMTYPE,

		/// <summary>
		/// Strongly typed for value OBJECT_ARRAY_NUMITEMS.
		/// </summary>
		ObjectArrayNumitems = VX.OBJECT_ARRAY_NUMITEMS,

	}

	/// <summary>
	/// Strongly typed enumeration ParameterAttribute.
	/// </summary>
	public enum ParameterAttribute
	{
		/// <summary>
		/// Strongly typed for value PARAMETER_INDEX.
		/// </summary>
		ParameterIndex = VX.PARAMETER_INDEX,

		/// <summary>
		/// Strongly typed for value PARAMETER_DIRECTION.
		/// </summary>
		ParameterDirection = VX.PARAMETER_DIRECTION,

		/// <summary>
		/// Strongly typed for value PARAMETER_TYPE.
		/// </summary>
		ParameterType = VX.PARAMETER_TYPE,

		/// <summary>
		/// Strongly typed for value PARAMETER_STATE.
		/// </summary>
		ParameterState = VX.PARAMETER_STATE,

		/// <summary>
		/// Strongly typed for value PARAMETER_REF.
		/// </summary>
		ParameterRef = VX.PARAMETER_REF,

	}

	/// <summary>
	/// Strongly typed enumeration ParameterState.
	/// </summary>
	public enum ParameterState
	{
		/// <summary>
		/// Strongly typed for value PARAMETER_STATE_REQUIRED.
		/// </summary>
		ParameterStateRequired = VX.PARAMETER_STATE_REQUIRED,

		/// <summary>
		/// Strongly typed for value PARAMETER_STATE_OPTIONAL.
		/// </summary>
		ParameterStateOptional = VX.PARAMETER_STATE_OPTIONAL,

	}

	/// <summary>
	/// Strongly typed enumeration Pattern.
	/// </summary>
	public enum Pattern
	{
		/// <summary>
		/// Strongly typed for value PATTERN_BOX.
		/// </summary>
		PatternBox = VX.PATTERN_BOX,

		/// <summary>
		/// Strongly typed for value PATTERN_CROSS.
		/// </summary>
		PatternCross = VX.PATTERN_CROSS,

		/// <summary>
		/// Strongly typed for value PATTERN_DISK.
		/// </summary>
		PatternDisk = VX.PATTERN_DISK,

		/// <summary>
		/// Strongly typed for value PATTERN_OTHER.
		/// </summary>
		PatternOther = VX.PATTERN_OTHER,

	}

	/// <summary>
	/// Strongly typed enumeration PyramidAttribute.
	/// </summary>
	public enum PyramidAttribute
	{
		/// <summary>
		/// Strongly typed for value PYRAMID_LEVELS.
		/// </summary>
		PyramidLevels = VX.PYRAMID_LEVELS,

		/// <summary>
		/// Strongly typed for value PYRAMID_SCALE.
		/// </summary>
		PyramidScale = VX.PYRAMID_SCALE,

		/// <summary>
		/// Strongly typed for value PYRAMID_WIDTH.
		/// </summary>
		PyramidWidth = VX.PYRAMID_WIDTH,

		/// <summary>
		/// Strongly typed for value PYRAMID_HEIGHT.
		/// </summary>
		PyramidHeight = VX.PYRAMID_HEIGHT,

		/// <summary>
		/// Strongly typed for value PYRAMID_FORMAT.
		/// </summary>
		PyramidFormat = VX.PYRAMID_FORMAT,

	}

	/// <summary>
	/// Strongly typed enumeration ReferenceAttribute.
	/// </summary>
	public enum ReferenceAttribute
	{
		/// <summary>
		/// Strongly typed for value REFERENCE_COUNT.
		/// </summary>
		ReferenceCount = VX.REFERENCE_COUNT,

		/// <summary>
		/// Strongly typed for value REFERENCE_TYPE.
		/// </summary>
		ReferenceType = VX.REFERENCE_TYPE,

		/// <summary>
		/// Strongly typed for value REFERENCE_NAME.
		/// </summary>
		ReferenceName = VX.REFERENCE_NAME,

	}

	/// <summary>
	/// Strongly typed enumeration RemapAttribute.
	/// </summary>
	public enum RemapAttribute
	{
		/// <summary>
		/// Strongly typed for value REMAP_SOURCE_WIDTH.
		/// </summary>
		RemapSourceWidth = VX.REMAP_SOURCE_WIDTH,

		/// <summary>
		/// Strongly typed for value REMAP_SOURCE_HEIGHT.
		/// </summary>
		RemapSourceHeight = VX.REMAP_SOURCE_HEIGHT,

		/// <summary>
		/// Strongly typed for value REMAP_DESTINATION_WIDTH.
		/// </summary>
		RemapDestinationWidth = VX.REMAP_DESTINATION_WIDTH,

		/// <summary>
		/// Strongly typed for value REMAP_DESTINATION_HEIGHT.
		/// </summary>
		RemapDestinationHeight = VX.REMAP_DESTINATION_HEIGHT,

	}

	/// <summary>
	/// Strongly typed enumeration RoundPolicy.
	/// </summary>
	public enum RoundPolicy
	{
		/// <summary>
		/// Strongly typed for value ROUND_POLICY_TO_ZERO.
		/// </summary>
		RoundPolicyToZero = VX.ROUND_POLICY_TO_ZERO,

		/// <summary>
		/// Strongly typed for value ROUND_POLICY_TO_NEAREST_EVEN.
		/// </summary>
		RoundPolicyToNearestEven = VX.ROUND_POLICY_TO_NEAREST_EVEN,

	}

	/// <summary>
	/// Strongly typed enumeration ScalarAttribute.
	/// </summary>
	public enum ScalarAttribute
	{
		/// <summary>
		/// Strongly typed for value SCALAR_TYPE.
		/// </summary>
		ScalarType = VX.SCALAR_TYPE,

	}

	/// <summary>
	/// Strongly typed enumeration Status.
	/// </summary>
	public enum Status
	{
		/// <summary>
		/// Strongly typed for value STATUS_MIN.
		/// </summary>
		StatusMin = VX.STATUS_MIN,

		/// <summary>
		/// Strongly typed for value ERROR_REFERENCE_NONZERO.
		/// </summary>
		ErrorReferenceNonzero = VX.ERROR_REFERENCE_NONZERO,

		/// <summary>
		/// Strongly typed for value ERROR_MULTIPLE_WRITERS.
		/// </summary>
		ErrorMultipleWriters = VX.ERROR_MULTIPLE_WRITERS,

		/// <summary>
		/// Strongly typed for value ERROR_GRAPH_ABANDONED.
		/// </summary>
		ErrorGraphAbandoned = VX.ERROR_GRAPH_ABANDONED,

		/// <summary>
		/// Strongly typed for value ERROR_GRAPH_SCHEDULED.
		/// </summary>
		ErrorGraphScheduled = VX.ERROR_GRAPH_SCHEDULED,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_SCOPE.
		/// </summary>
		ErrorInvalidScope = VX.ERROR_INVALID_SCOPE,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_NODE.
		/// </summary>
		ErrorInvalidNode = VX.ERROR_INVALID_NODE,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_GRAPH.
		/// </summary>
		ErrorInvalidGraph = VX.ERROR_INVALID_GRAPH,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_TYPE.
		/// </summary>
		ErrorInvalidType = VX.ERROR_INVALID_TYPE,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_VALUE.
		/// </summary>
		ErrorInvalidValue = VX.ERROR_INVALID_VALUE,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_DIMENSION.
		/// </summary>
		ErrorInvalidDimension = VX.ERROR_INVALID_DIMENSION,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_FORMAT.
		/// </summary>
		ErrorInvalidFormat = VX.ERROR_INVALID_FORMAT,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_LINK.
		/// </summary>
		ErrorInvalidLink = VX.ERROR_INVALID_LINK,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_REFERENCE.
		/// </summary>
		ErrorInvalidReference = VX.ERROR_INVALID_REFERENCE,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_MODULE.
		/// </summary>
		ErrorInvalidModule = VX.ERROR_INVALID_MODULE,

		/// <summary>
		/// Strongly typed for value ERROR_INVALID_PARAMETERS.
		/// </summary>
		ErrorInvalidParameters = VX.ERROR_INVALID_PARAMETERS,

		/// <summary>
		/// Strongly typed for value ERROR_OPTIMIZED_AWAY.
		/// </summary>
		ErrorOptimizedAway = VX.ERROR_OPTIMIZED_AWAY,

		/// <summary>
		/// Strongly typed for value ERROR_NO_MEMORY.
		/// </summary>
		ErrorNoMemory = VX.ERROR_NO_MEMORY,

		/// <summary>
		/// Strongly typed for value ERROR_NO_RESOURCES.
		/// </summary>
		ErrorNoResources = VX.ERROR_NO_RESOURCES,

		/// <summary>
		/// Strongly typed for value ERROR_NOT_COMPATIBLE.
		/// </summary>
		ErrorNotCompatible = VX.ERROR_NOT_COMPATIBLE,

		/// <summary>
		/// Strongly typed for value ERROR_NOT_ALLOCATED.
		/// </summary>
		ErrorNotAllocated = VX.ERROR_NOT_ALLOCATED,

		/// <summary>
		/// Strongly typed for value ERROR_NOT_SUFFICIENT.
		/// </summary>
		ErrorNotSufficient = VX.ERROR_NOT_SUFFICIENT,

		/// <summary>
		/// Strongly typed for value ERROR_NOT_SUPPORTED.
		/// </summary>
		ErrorNotSupported = VX.ERROR_NOT_SUPPORTED,

		/// <summary>
		/// Strongly typed for value ERROR_NOT_IMPLEMENTED.
		/// </summary>
		ErrorNotImplemented = VX.ERROR_NOT_IMPLEMENTED,

		/// <summary>
		/// Strongly typed for value FAILURE.
		/// </summary>
		Failure = VX.FAILURE,

		/// <summary>
		/// Strongly typed for value SUCCESS.
		/// </summary>
		Success = VX.SUCCESS,

	}

	/// <summary>
	/// Strongly typed enumeration Target.
	/// </summary>
	public enum Target
	{
		/// <summary>
		/// Strongly typed for value TARGET_ANY.
		/// </summary>
		TargetAny = VX.TARGET_ANY,

		/// <summary>
		/// Strongly typed for value TARGET_STRING.
		/// </summary>
		TargetString = VX.TARGET_STRING,

		/// <summary>
		/// Strongly typed for value TARGET_VENDOR_BEGIN.
		/// </summary>
		TargetVendorBegin = VX.TARGET_VENDOR_BEGIN,

	}

	/// <summary>
	/// Strongly typed enumeration TerminationCriteria.
	/// </summary>
	public enum TerminationCriteria
	{
		/// <summary>
		/// Strongly typed for value TERM_CRITERIA_ITERATIONS.
		/// </summary>
		TermCriteriaIterations = VX.TERM_CRITERIA_ITERATIONS,

		/// <summary>
		/// Strongly typed for value TERM_CRITERIA_EPSILON.
		/// </summary>
		TermCriteriaEpsilon = VX.TERM_CRITERIA_EPSILON,

		/// <summary>
		/// Strongly typed for value TERM_CRITERIA_BOTH.
		/// </summary>
		TermCriteriaBoth = VX.TERM_CRITERIA_BOTH,

	}

	/// <summary>
	/// Strongly typed enumeration ThresholdAttribute.
	/// </summary>
	public enum ThresholdAttribute
	{
		/// <summary>
		/// Strongly typed for value THRESHOLD_TYPE.
		/// </summary>
		ThresholdType = VX.THRESHOLD_TYPE,

		/// <summary>
		/// Strongly typed for value THRESHOLD_THRESHOLD_VALUE.
		/// </summary>
		ThresholdThresholdValue = VX.THRESHOLD_THRESHOLD_VALUE,

		/// <summary>
		/// Strongly typed for value THRESHOLD_THRESHOLD_LOWER.
		/// </summary>
		ThresholdThresholdLower = VX.THRESHOLD_THRESHOLD_LOWER,

		/// <summary>
		/// Strongly typed for value THRESHOLD_THRESHOLD_UPPER.
		/// </summary>
		ThresholdThresholdUpper = VX.THRESHOLD_THRESHOLD_UPPER,

		/// <summary>
		/// Strongly typed for value THRESHOLD_TRUE_VALUE.
		/// </summary>
		ThresholdTrueValue = VX.THRESHOLD_TRUE_VALUE,

		/// <summary>
		/// Strongly typed for value THRESHOLD_FALSE_VALUE.
		/// </summary>
		ThresholdFalseValue = VX.THRESHOLD_FALSE_VALUE,

		/// <summary>
		/// Strongly typed for value THRESHOLD_DATA_TYPE.
		/// </summary>
		ThresholdDataType = VX.THRESHOLD_DATA_TYPE,

	}

	/// <summary>
	/// Strongly typed enumeration ThresholdType.
	/// </summary>
	public enum ThresholdType
	{
		/// <summary>
		/// Strongly typed for value THRESHOLD_TYPE_BINARY.
		/// </summary>
		ThresholdTypeBinary = VX.THRESHOLD_TYPE_BINARY,

		/// <summary>
		/// Strongly typed for value THRESHOLD_TYPE_RANGE.
		/// </summary>
		ThresholdTypeRange = VX.THRESHOLD_TYPE_RANGE,

	}

	/// <summary>
	/// Strongly typed enumeration Type.
	/// </summary>
	public enum Type
	{
		/// <summary>
		/// Strongly typed for value TYPE_INVALID.
		/// </summary>
		TypeInvalid = VX.TYPE_INVALID,

		/// <summary>
		/// Strongly typed for value TYPE_CHAR.
		/// </summary>
		TypeChar = VX.TYPE_CHAR,

		/// <summary>
		/// Strongly typed for value TYPE_INT8.
		/// </summary>
		TypeInt8 = VX.TYPE_INT8,

		/// <summary>
		/// Strongly typed for value TYPE_UINT8.
		/// </summary>
		TypeUint8 = VX.TYPE_UINT8,

		/// <summary>
		/// Strongly typed for value TYPE_INT16.
		/// </summary>
		TypeInt16 = VX.TYPE_INT16,

		/// <summary>
		/// Strongly typed for value TYPE_UINT16.
		/// </summary>
		TypeUint16 = VX.TYPE_UINT16,

		/// <summary>
		/// Strongly typed for value TYPE_INT32.
		/// </summary>
		TypeInt32 = VX.TYPE_INT32,

		/// <summary>
		/// Strongly typed for value TYPE_UINT32.
		/// </summary>
		TypeUint32 = VX.TYPE_UINT32,

		/// <summary>
		/// Strongly typed for value TYPE_INT64.
		/// </summary>
		TypeInt64 = VX.TYPE_INT64,

		/// <summary>
		/// Strongly typed for value TYPE_UINT64.
		/// </summary>
		TypeUint64 = VX.TYPE_UINT64,

		/// <summary>
		/// Strongly typed for value TYPE_FLOAT32.
		/// </summary>
		TypeFloat32 = VX.TYPE_FLOAT32,

		/// <summary>
		/// Strongly typed for value TYPE_FLOAT64.
		/// </summary>
		TypeFloat64 = VX.TYPE_FLOAT64,

		/// <summary>
		/// Strongly typed for value TYPE_ENUM.
		/// </summary>
		TypeEnum = VX.TYPE_ENUM,

		/// <summary>
		/// Strongly typed for value TYPE_SIZE.
		/// </summary>
		TypeSize = VX.TYPE_SIZE,

		/// <summary>
		/// Strongly typed for value TYPE_DF_IMAGE.
		/// </summary>
		TypeDfImage = VX.TYPE_DF_IMAGE,

		/// <summary>
		/// Strongly typed for value TYPE_FLOAT16.
		/// </summary>
		TypeFloat16 = VX.TYPE_FLOAT16,

		/// <summary>
		/// Strongly typed for value TYPE_BOOL.
		/// </summary>
		TypeBool = VX.TYPE_BOOL,

		/// <summary>
		/// Strongly typed for value TYPE_RECTANGLE.
		/// </summary>
		TypeRectangle = VX.TYPE_RECTANGLE,

		/// <summary>
		/// Strongly typed for value TYPE_KEYPOINT.
		/// </summary>
		TypeKeypoint = VX.TYPE_KEYPOINT,

		/// <summary>
		/// Strongly typed for value TYPE_COORDINATES2D.
		/// </summary>
		TypeCoordinates2d = VX.TYPE_COORDINATES2D,

		/// <summary>
		/// Strongly typed for value TYPE_COORDINATES3D.
		/// </summary>
		TypeCoordinates3d = VX.TYPE_COORDINATES3D,

		/// <summary>
		/// Strongly typed for value TYPE_USER_STRUCT_START.
		/// </summary>
		TypeUserStructStart = VX.TYPE_USER_STRUCT_START,

		/// <summary>
		/// Strongly typed for value TYPE_VENDOR_STRUCT_START.
		/// </summary>
		TypeVendorStructStart = VX.TYPE_VENDOR_STRUCT_START,

		/// <summary>
		/// Strongly typed for value TYPE_KHRONOS_OBJECT_START, TYPE_REFERENCE.
		/// </summary>
		TypeKhronosObjectStart = VX.TYPE_KHRONOS_OBJECT_START,

		/// <summary>
		/// Strongly typed for value TYPE_KHRONOS_OBJECT_START, TYPE_REFERENCE.
		/// </summary>
		TypeReference = VX.TYPE_REFERENCE,

		/// <summary>
		/// Strongly typed for value TYPE_VENDOR_OBJECT_START.
		/// </summary>
		TypeVendorObjectStart = VX.TYPE_VENDOR_OBJECT_START,

		/// <summary>
		/// Strongly typed for value TYPE_KHRONOS_STRUCT_MAX.
		/// </summary>
		TypeKhronosStructMax = VX.TYPE_KHRONOS_STRUCT_MAX,

		/// <summary>
		/// Strongly typed for value TYPE_USER_STRUCT_END.
		/// </summary>
		TypeUserStructEnd = VX.TYPE_USER_STRUCT_END,

		/// <summary>
		/// Strongly typed for value TYPE_VENDOR_STRUCT_END.
		/// </summary>
		TypeVendorStructEnd = VX.TYPE_VENDOR_STRUCT_END,

		/// <summary>
		/// Strongly typed for value TYPE_KHRONOS_OBJECT_END.
		/// </summary>
		TypeKhronosObjectEnd = VX.TYPE_KHRONOS_OBJECT_END,

		/// <summary>
		/// Strongly typed for value TYPE_VENDOR_OBJECT_END.
		/// </summary>
		TypeVendorObjectEnd = VX.TYPE_VENDOR_OBJECT_END,

		/// <summary>
		/// Strongly typed for value TYPE_CONTEXT.
		/// </summary>
		TypeContext = VX.TYPE_CONTEXT,

		/// <summary>
		/// Strongly typed for value TYPE_GRAPH.
		/// </summary>
		TypeGraph = VX.TYPE_GRAPH,

		/// <summary>
		/// Strongly typed for value TYPE_NODE.
		/// </summary>
		TypeNode = VX.TYPE_NODE,

		/// <summary>
		/// Strongly typed for value TYPE_KERNEL.
		/// </summary>
		TypeKernel = VX.TYPE_KERNEL,

		/// <summary>
		/// Strongly typed for value TYPE_PARAMETER.
		/// </summary>
		TypeParameter = VX.TYPE_PARAMETER,

		/// <summary>
		/// Strongly typed for value TYPE_DELAY.
		/// </summary>
		TypeDelay = VX.TYPE_DELAY,

		/// <summary>
		/// Strongly typed for value TYPE_LUT.
		/// </summary>
		TypeLut = VX.TYPE_LUT,

		/// <summary>
		/// Strongly typed for value TYPE_DISTRIBUTION.
		/// </summary>
		TypeDistribution = VX.TYPE_DISTRIBUTION,

		/// <summary>
		/// Strongly typed for value TYPE_PYRAMID.
		/// </summary>
		TypePyramid = VX.TYPE_PYRAMID,

		/// <summary>
		/// Strongly typed for value TYPE_THRESHOLD.
		/// </summary>
		TypeThreshold = VX.TYPE_THRESHOLD,

		/// <summary>
		/// Strongly typed for value TYPE_MATRIX.
		/// </summary>
		TypeMatrix = VX.TYPE_MATRIX,

		/// <summary>
		/// Strongly typed for value TYPE_CONVOLUTION.
		/// </summary>
		TypeConvolution = VX.TYPE_CONVOLUTION,

		/// <summary>
		/// Strongly typed for value TYPE_SCALAR.
		/// </summary>
		TypeScalar = VX.TYPE_SCALAR,

		/// <summary>
		/// Strongly typed for value TYPE_ARRAY.
		/// </summary>
		TypeArray = VX.TYPE_ARRAY,

		/// <summary>
		/// Strongly typed for value TYPE_IMAGE.
		/// </summary>
		TypeImage = VX.TYPE_IMAGE,

		/// <summary>
		/// Strongly typed for value TYPE_REMAP.
		/// </summary>
		TypeRemap = VX.TYPE_REMAP,

		/// <summary>
		/// Strongly typed for value TYPE_ERROR.
		/// </summary>
		TypeError = VX.TYPE_ERROR,

		/// <summary>
		/// Strongly typed for value TYPE_META_FORMAT.
		/// </summary>
		TypeMetaFormat = VX.TYPE_META_FORMAT,

		/// <summary>
		/// Strongly typed for value TYPE_OBJECT_ARRAY.
		/// </summary>
		TypeObjectArray = VX.TYPE_OBJECT_ARRAY,

	}

	/// <summary>
	/// Strongly typed enumeration VendorId.
	/// </summary>
	public enum VendorId
	{
		/// <summary>
		/// Strongly typed for value ID_KHRONOS.
		/// </summary>
		IdKhronos = VX.ID_KHRONOS,

		/// <summary>
		/// Strongly typed for value ID_TI.
		/// </summary>
		IdTi = VX.ID_TI,

		/// <summary>
		/// Strongly typed for value ID_QUALCOMM.
		/// </summary>
		IdQualcomm = VX.ID_QUALCOMM,

		/// <summary>
		/// Strongly typed for value ID_NVIDIA.
		/// </summary>
		IdNvidia = VX.ID_NVIDIA,

		/// <summary>
		/// Strongly typed for value ID_ARM.
		/// </summary>
		IdArm = VX.ID_ARM,

		/// <summary>
		/// Strongly typed for value ID_BDTI.
		/// </summary>
		IdBdti = VX.ID_BDTI,

		/// <summary>
		/// Strongly typed for value ID_RENESAS.
		/// </summary>
		IdRenesas = VX.ID_RENESAS,

		/// <summary>
		/// Strongly typed for value ID_VIVANTE.
		/// </summary>
		IdVivante = VX.ID_VIVANTE,

		/// <summary>
		/// Strongly typed for value ID_XILINX.
		/// </summary>
		IdXilinx = VX.ID_XILINX,

		/// <summary>
		/// Strongly typed for value ID_AXIS.
		/// </summary>
		IdAxis = VX.ID_AXIS,

		/// <summary>
		/// Strongly typed for value ID_MOVIDIUS.
		/// </summary>
		IdMovidius = VX.ID_MOVIDIUS,

		/// <summary>
		/// Strongly typed for value ID_SAMSUNG.
		/// </summary>
		IdSamsung = VX.ID_SAMSUNG,

		/// <summary>
		/// Strongly typed for value ID_FREESCALE.
		/// </summary>
		IdFreescale = VX.ID_FREESCALE,

		/// <summary>
		/// Strongly typed for value ID_AMD.
		/// </summary>
		IdAmd = VX.ID_AMD,

		/// <summary>
		/// Strongly typed for value ID_BROADCOM.
		/// </summary>
		IdBroadcom = VX.ID_BROADCOM,

		/// <summary>
		/// Strongly typed for value ID_INTEL.
		/// </summary>
		IdIntel = VX.ID_INTEL,

		/// <summary>
		/// Strongly typed for value ID_MARVELL.
		/// </summary>
		IdMarvell = VX.ID_MARVELL,

		/// <summary>
		/// Strongly typed for value ID_MEDIATEK.
		/// </summary>
		IdMediatek = VX.ID_MEDIATEK,

		/// <summary>
		/// Strongly typed for value ID_ST.
		/// </summary>
		IdSt = VX.ID_ST,

		/// <summary>
		/// Strongly typed for value ID_CEVA.
		/// </summary>
		IdCeva = VX.ID_CEVA,

		/// <summary>
		/// Strongly typed for value ID_ITSEEZ.
		/// </summary>
		IdItseez = VX.ID_ITSEEZ,

		/// <summary>
		/// Strongly typed for value ID_NXP.
		/// </summary>
		IdNxp = VX.ID_NXP,

		/// <summary>
		/// Strongly typed for value ID_VIDEANTIS.
		/// </summary>
		IdVideantis = VX.ID_VIDEANTIS,

		/// <summary>
		/// Strongly typed for value ID_SYNOPSYS.
		/// </summary>
		IdSynopsys = VX.ID_SYNOPSYS,

		/// <summary>
		/// Strongly typed for value ID_CADENCE.
		/// </summary>
		IdCadence = VX.ID_CADENCE,

		/// <summary>
		/// Strongly typed for value ID_HUAWEI.
		/// </summary>
		IdHuawei = VX.ID_HUAWEI,

		/// <summary>
		/// Strongly typed for value ID_USER.
		/// </summary>
		IdUser = VX.ID_USER,

		/// <summary>
		/// Strongly typed for value ID_MAX.
		/// </summary>
		IdMax = VX.ID_MAX,

		/// <summary>
		/// Strongly typed for value ID_DEFAULT.
		/// </summary>
		IdDefault = VX.ID_DEFAULT,

	}

}
