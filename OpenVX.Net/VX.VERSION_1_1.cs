
// MIT License
// 
// Copyright (c) 2009-2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// 
// This file is automatically generated

#pragma warning disable 649, 1572, 1573

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

using Khronos;

namespace OpenVX
{
	public partial class VX
	{
		public static IntPtr CreateContext()
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateContext != null, "pvxCreateContext not implemented");
			retValue = Delegates.pvxCreateContext();
			LogCommand("vxCreateContext", retValue			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseContext(IntPtr[] context)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_context = context)
				{
					Debug.Assert(Delegates.pvxReleaseContext != null, "pvxReleaseContext not implemented");
					retValue = Delegates.pvxReleaseContext(p_context);
					LogCommand("vxReleaseContext", retValue, context					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetContext(IntPtr reference)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetContext != null, "pvxGetContext not implemented");
			retValue = Delegates.pvxGetContext(reference);
			LogCommand("vxGetContext", retValue, reference			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryContext(IntPtr context, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryContext != null, "pvxQueryContext not implemented");
					retValue = Delegates.pvxQueryContext(context, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryContext", retValue, context, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetContextAttribute(IntPtr context, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetContextAttribute != null, "pvxSetContextAttribute not implemented");
					retValue = Delegates.pvxSetContextAttribute(context, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetContextAttribute", retValue, context, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int Hint(IntPtr reference, int hint, IntPtr data, uint data_size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxHint != null, "pvxHint not implemented");
					retValue = Delegates.pvxHint(reference, hint, data.ToPointer(), data_size);
					LogCommand("vxHint", retValue, reference, hint, data, data_size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int Directive(IntPtr reference, int directive)
		{
			int retValue;

			Debug.Assert(Delegates.pvxDirective != null, "pvxDirective not implemented");
			retValue = Delegates.pvxDirective(reference, directive);
			LogCommand("vxDirective", retValue, reference, directive			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int GetStatus(IntPtr reference)
		{
			int retValue;

			Debug.Assert(Delegates.pvxGetStatus != null, "pvxGetStatus not implemented");
			retValue = Delegates.pvxGetStatus(reference);
			LogCommand("vxGetStatus", retValue, reference			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int RegisterUserStruct(IntPtr context, uint size)
		{
			int retValue;

			Debug.Assert(Delegates.pvxRegisterUserStruct != null, "pvxRegisterUserStruct not implemented");
			retValue = Delegates.pvxRegisterUserStruct(context, size);
			LogCommand("vxRegisterUserStruct", retValue, context, size			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int AllocateUserKernelId(IntPtr context, int[] pKernelEnumId)
		{
			int retValue;

			unsafe {
				fixed (int* p_pKernelEnumId = pKernelEnumId)
				{
					Debug.Assert(Delegates.pvxAllocateUserKernelId != null, "pvxAllocateUserKernelId not implemented");
					retValue = Delegates.pvxAllocateUserKernelId(context, p_pKernelEnumId);
					LogCommand("vxAllocateUserKernelId", retValue, context, pKernelEnumId					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int AllocateUserKernelLibraryId(IntPtr context, int[] pLibraryId)
		{
			int retValue;

			unsafe {
				fixed (int* p_pLibraryId = pLibraryId)
				{
					Debug.Assert(Delegates.pvxAllocateUserKernelLibraryId != null, "pvxAllocateUserKernelLibraryId not implemented");
					retValue = Delegates.pvxAllocateUserKernelLibraryId(context, p_pLibraryId);
					LogCommand("vxAllocateUserKernelLibraryId", retValue, context, pLibraryId					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetImmediateModeTarget(IntPtr context, int target_enum, string target_string)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetImmediateModeTarget != null, "pvxSetImmediateModeTarget not implemented");
			retValue = Delegates.pvxSetImmediateModeTarget(context, target_enum, target_string);
			LogCommand("vxSetImmediateModeTarget", retValue, context, target_enum, target_string			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateImage(IntPtr context, uint width, uint height, uint color)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateImage != null, "pvxCreateImage not implemented");
			retValue = Delegates.pvxCreateImage(context, width, height, color);
			LogCommand("vxCreateImage", retValue, context, width, height, color			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateImageFromROI(IntPtr img, Rectangle[] rect)
		{
			IntPtr retValue;

			unsafe {
				fixed (Rectangle* p_rect = rect)
				{
					Debug.Assert(Delegates.pvxCreateImageFromROI != null, "pvxCreateImageFromROI not implemented");
					retValue = Delegates.pvxCreateImageFromROI(img, p_rect);
					LogCommand("vxCreateImageFromROI", retValue, img, rect					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateUniformImage(IntPtr context, uint width, uint height, uint color, PixelValue value)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateUniformImage != null, "pvxCreateUniformImage not implemented");
			retValue = Delegates.pvxCreateUniformImage(context, width, height, color, value);
			LogCommand("vxCreateUniformImage", retValue, context, width, height, color, value			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateVirtualImage(IntPtr graph, uint width, uint height, uint color)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateVirtualImage != null, "pvxCreateVirtualImage not implemented");
			retValue = Delegates.pvxCreateVirtualImage(graph, width, height, color);
			LogCommand("vxCreateVirtualImage", retValue, graph, width, height, color			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateImageFromHandle(IntPtr context, uint color, ImagePatchAddressing[] addrs, IntPtr[] ptrs, int memory_type)
		{
			IntPtr retValue;

			unsafe {
				fixed (ImagePatchAddressing* p_addrs = addrs)
				fixed (IntPtr* p_ptrs = ptrs)
				{
					Debug.Assert(Delegates.pvxCreateImageFromHandle != null, "pvxCreateImageFromHandle not implemented");
					retValue = Delegates.pvxCreateImageFromHandle(context, color, p_addrs, p_ptrs, memory_type);
					LogCommand("vxCreateImageFromHandle", retValue, context, color, addrs, ptrs, memory_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SwapImageHandle(IntPtr image, IntPtr[] new_ptrs, IntPtr[] prev_ptrs, uint num_planes)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_new_ptrs = new_ptrs)
				fixed (IntPtr* p_prev_ptrs = prev_ptrs)
				{
					Debug.Assert(Delegates.pvxSwapImageHandle != null, "pvxSwapImageHandle not implemented");
					retValue = Delegates.pvxSwapImageHandle(image, p_new_ptrs, p_prev_ptrs, num_planes);
					LogCommand("vxSwapImageHandle", retValue, image, new_ptrs, prev_ptrs, num_planes					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryImage(IntPtr image, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryImage != null, "pvxQueryImage not implemented");
					retValue = Delegates.pvxQueryImage(image, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryImage", retValue, image, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetImageAttribute(IntPtr image, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetImageAttribute != null, "pvxSetImageAttribute not implemented");
					retValue = Delegates.pvxSetImageAttribute(image, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetImageAttribute", retValue, image, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseImage(IntPtr[] image)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_image = image)
				{
					Debug.Assert(Delegates.pvxReleaseImage != null, "pvxReleaseImage not implemented");
					retValue = Delegates.pvxReleaseImage(p_image);
					LogCommand("vxReleaseImage", retValue, image					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static uint ComputeImagePatchSize(IntPtr image, Rectangle[] rect, uint plane_index)
		{
			uint retValue;

			unsafe {
				fixed (Rectangle* p_rect = rect)
				{
					Debug.Assert(Delegates.pvxComputeImagePatchSize != null, "pvxComputeImagePatchSize not implemented");
					retValue = Delegates.pvxComputeImagePatchSize(image, p_rect, plane_index);
					LogCommand("vxComputeImagePatchSize", retValue, image, rect, plane_index					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr FormatImagePatchAdd(IntPtr ptr, uint index, ImagePatchAddressing[] addr)
		{
			IntPtr retValue;

			unsafe {
				fixed (ImagePatchAddressing* p_addr = addr)
				{
					Debug.Assert(Delegates.pvxFormatImagePatchAddress1d != null, "pvxFormatImagePatchAddress1d not implemented");
					retValue = Delegates.pvxFormatImagePatchAddress1d(ptr.ToPointer(), index, p_addr);
					LogCommand("vxFormatImagePatchAddress1d", retValue, ptr, index, addr					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr FormatImagePatchAdd(IntPtr ptr, uint x, uint y, ImagePatchAddressing[] addr)
		{
			IntPtr retValue;

			unsafe {
				fixed (ImagePatchAddressing* p_addr = addr)
				{
					Debug.Assert(Delegates.pvxFormatImagePatchAddress2d != null, "pvxFormatImagePatchAddress2d not implemented");
					retValue = Delegates.pvxFormatImagePatchAddress2d(ptr.ToPointer(), x, y, p_addr);
					LogCommand("vxFormatImagePatchAddress2d", retValue, ptr, x, y, addr					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int GetValidRegionImage(IntPtr image, [Out] Rectangle[] rect)
		{
			int retValue;

			unsafe {
				fixed (Rectangle* p_rect = rect)
				{
					Debug.Assert(Delegates.pvxGetValidRegionImage != null, "pvxGetValidRegionImage not implemented");
					retValue = Delegates.pvxGetValidRegionImage(image, p_rect);
					LogCommand("vxGetValidRegionImage", retValue, image, rect					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int CopyImagePatch(IntPtr image, Rectangle[] image_rect, uint image_plane_index, ImagePatchAddressing[] user_addr, IntPtr user_ptr, int usage, int user_mem_type)
		{
			int retValue;

			unsafe {
				fixed (Rectangle* p_image_rect = image_rect)
				fixed (ImagePatchAddressing* p_user_addr = user_addr)
				{
					Debug.Assert(Delegates.pvxCopyImagePatch != null, "pvxCopyImagePatch not implemented");
					retValue = Delegates.pvxCopyImagePatch(image, p_image_rect, image_plane_index, p_user_addr, user_ptr.ToPointer(), usage, user_mem_type);
					LogCommand("vxCopyImagePatch", retValue, image, image_rect, image_plane_index, user_addr, user_ptr, usage, user_mem_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int MapImagePatch(IntPtr image, Rectangle[] rect, uint plane_index, UIntPtr[] map_id, ImagePatchAddressing[] addr, IntPtr[] ptr, int usage, int mem_type, uint flags)
		{
			int retValue;

			unsafe {
				fixed (Rectangle* p_rect = rect)
				fixed (UIntPtr* p_map_id = map_id)
				fixed (ImagePatchAddressing* p_addr = addr)
				fixed (IntPtr* p_ptr = ptr)
				{
					Debug.Assert(Delegates.pvxMapImagePatch != null, "pvxMapImagePatch not implemented");
					retValue = Delegates.pvxMapImagePatch(image, p_rect, plane_index, p_map_id, p_addr, p_ptr, usage, mem_type, flags);
					LogCommand("vxMapImagePatch", retValue, image, rect, plane_index, map_id, addr, ptr, usage, mem_type, flags					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int UnmapImagePatch(IntPtr image, UIntPtr map_id)
		{
			int retValue;

			Debug.Assert(Delegates.pvxUnmapImagePatch != null, "pvxUnmapImagePatch not implemented");
			retValue = Delegates.pvxUnmapImagePatch(image, map_id);
			LogCommand("vxUnmapImagePatch", retValue, image, map_id			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateImageFromChannel(IntPtr img, int channel)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateImageFromChannel != null, "pvxCreateImageFromChannel not implemented");
			retValue = Delegates.pvxCreateImageFromChannel(img, channel);
			LogCommand("vxCreateImageFromChannel", retValue, img, channel			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetImageValidRectangle(IntPtr image, Rectangle[] rect)
		{
			int retValue;

			unsafe {
				fixed (Rectangle* p_rect = rect)
				{
					Debug.Assert(Delegates.pvxSetImageValidRectangle != null, "pvxSetImageValidRectangle not implemented");
					retValue = Delegates.pvxSetImageValidRectangle(image, p_rect);
					LogCommand("vxSetImageValidRectangle", retValue, image, rect					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int LoadKernels(IntPtr context, string module)
		{
			int retValue;

			Debug.Assert(Delegates.pvxLoadKernels != null, "pvxLoadKernels not implemented");
			retValue = Delegates.pvxLoadKernels(context, module);
			LogCommand("vxLoadKernels", retValue, context, module			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int UnloadKernels(IntPtr context, string module)
		{
			int retValue;

			Debug.Assert(Delegates.pvxUnloadKernels != null, "pvxUnloadKernels not implemented");
			retValue = Delegates.pvxUnloadKernels(context, module);
			LogCommand("vxUnloadKernels", retValue, context, module			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetKernelByName(IntPtr context, string name)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetKernelByName != null, "pvxGetKernelByName not implemented");
			retValue = Delegates.pvxGetKernelByName(context, name);
			LogCommand("vxGetKernelByName", retValue, context, name			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetKernelByEnum(IntPtr context, int kernel)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetKernelByEnum != null, "pvxGetKernelByEnum not implemented");
			retValue = Delegates.pvxGetKernelByEnum(context, kernel);
			LogCommand("vxGetKernelByEnum", retValue, context, kernel			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryKernel(IntPtr kernel, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryKernel != null, "pvxQueryKernel not implemented");
					retValue = Delegates.pvxQueryKernel(kernel, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryKernel", retValue, kernel, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseKernel(IntPtr[] kernel)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_kernel = kernel)
				{
					Debug.Assert(Delegates.pvxReleaseKernel != null, "pvxReleaseKernel not implemented");
					retValue = Delegates.pvxReleaseKernel(p_kernel);
					LogCommand("vxReleaseKernel", retValue, kernel					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr AddUserKernel(IntPtr context, string name, int enumeration, KernelCallback func_ptr, uint numParams, KernelValidateCallbackCallback validate, KernelInitializeCallback init, KernelDeinitializeCallback deinit)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxAddUserKernel != null, "pvxAddUserKernel not implemented");
			retValue = Delegates.pvxAddUserKernel(context, name, enumeration, func_ptr, numParams, validate, init, deinit);
			LogCommand("vxAddUserKernel", retValue, context, name, enumeration, func_ptr, numParams, validate, init, deinit			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int FinalizeKernel(IntPtr kernel)
		{
			int retValue;

			Debug.Assert(Delegates.pvxFinalizeKernel != null, "pvxFinalizeKernel not implemented");
			retValue = Delegates.pvxFinalizeKernel(kernel);
			LogCommand("vxFinalizeKernel", retValue, kernel			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int AddParameterToKernel(IntPtr kernel, uint index, int dir, int data_type, int state)
		{
			int retValue;

			Debug.Assert(Delegates.pvxAddParameterToKernel != null, "pvxAddParameterToKernel not implemented");
			retValue = Delegates.pvxAddParameterToKernel(kernel, index, dir, data_type, state);
			LogCommand("vxAddParameterToKernel", retValue, kernel, index, dir, data_type, state			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int RemoveKernel(IntPtr kernel)
		{
			int retValue;

			Debug.Assert(Delegates.pvxRemoveKernel != null, "pvxRemoveKernel not implemented");
			retValue = Delegates.pvxRemoveKernel(kernel);
			LogCommand("vxRemoveKernel", retValue, kernel			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetKernelAttribute(IntPtr kernel, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetKernelAttribute != null, "pvxSetKernelAttribute not implemented");
					retValue = Delegates.pvxSetKernelAttribute(kernel, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetKernelAttribute", retValue, kernel, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetKernelParameterByIndex(IntPtr kernel, uint index)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetKernelParameterByIndex != null, "pvxGetKernelParameterByIndex not implemented");
			retValue = Delegates.pvxGetKernelParameterByIndex(kernel, index);
			LogCommand("vxGetKernelParameterByIndex", retValue, kernel, index			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateGraph(IntPtr context)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateGraph != null, "pvxCreateGraph not implemented");
			retValue = Delegates.pvxCreateGraph(context);
			LogCommand("vxCreateGraph", retValue, context			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseGraph(IntPtr[] graph)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_graph = graph)
				{
					Debug.Assert(Delegates.pvxReleaseGraph != null, "pvxReleaseGraph not implemented");
					retValue = Delegates.pvxReleaseGraph(p_graph);
					LogCommand("vxReleaseGraph", retValue, graph					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int VerifyGraph(IntPtr graph)
		{
			int retValue;

			Debug.Assert(Delegates.pvxVerifyGraph != null, "pvxVerifyGraph not implemented");
			retValue = Delegates.pvxVerifyGraph(graph);
			LogCommand("vxVerifyGraph", retValue, graph			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ProcessGraph(IntPtr graph)
		{
			int retValue;

			Debug.Assert(Delegates.pvxProcessGraph != null, "pvxProcessGraph not implemented");
			retValue = Delegates.pvxProcessGraph(graph);
			LogCommand("vxProcessGraph", retValue, graph			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ScheduleGraph(IntPtr graph)
		{
			int retValue;

			Debug.Assert(Delegates.pvxScheduleGraph != null, "pvxScheduleGraph not implemented");
			retValue = Delegates.pvxScheduleGraph(graph);
			LogCommand("vxScheduleGraph", retValue, graph			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int WaitGraph(IntPtr graph)
		{
			int retValue;

			Debug.Assert(Delegates.pvxWaitGraph != null, "pvxWaitGraph not implemented");
			retValue = Delegates.pvxWaitGraph(graph);
			LogCommand("vxWaitGraph", retValue, graph			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryGraph(IntPtr graph, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryGraph != null, "pvxQueryGraph not implemented");
					retValue = Delegates.pvxQueryGraph(graph, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryGraph", retValue, graph, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetGraphAttribute(IntPtr graph, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetGraphAttribute != null, "pvxSetGraphAttribute not implemented");
					retValue = Delegates.pvxSetGraphAttribute(graph, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetGraphAttribute", retValue, graph, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int AddParameterToGraph(IntPtr graph, IntPtr parameter)
		{
			int retValue;

			Debug.Assert(Delegates.pvxAddParameterToGraph != null, "pvxAddParameterToGraph not implemented");
			retValue = Delegates.pvxAddParameterToGraph(graph, parameter);
			LogCommand("vxAddParameterToGraph", retValue, graph, parameter			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetGraphParameterByIndex(IntPtr graph, uint index, IntPtr value)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetGraphParameterByIndex != null, "pvxSetGraphParameterByIndex not implemented");
			retValue = Delegates.pvxSetGraphParameterByIndex(graph, index, value);
			LogCommand("vxSetGraphParameterByIndex", retValue, graph, index, value			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetGraphParameterByIndex(IntPtr graph, uint index)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetGraphParameterByIndex != null, "pvxGetGraphParameterByIndex not implemented");
			retValue = Delegates.pvxGetGraphParameterByIndex(graph, index);
			LogCommand("vxGetGraphParameterByIndex", retValue, graph, index			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int IsGraph(IntPtr graph)
		{
			int retValue;

			Debug.Assert(Delegates.pvxIsGraphVerified != null, "pvxIsGraphVerified not implemented");
			retValue = Delegates.pvxIsGraphVerified(graph);
			LogCommand("vxIsGraphVerified", retValue, graph			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateGenericNode(IntPtr graph, IntPtr kernel)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateGenericNode != null, "pvxCreateGenericNode not implemented");
			retValue = Delegates.pvxCreateGenericNode(graph, kernel);
			LogCommand("vxCreateGenericNode", retValue, graph, kernel			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryNode(IntPtr node, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryNode != null, "pvxQueryNode not implemented");
					retValue = Delegates.pvxQueryNode(node, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryNode", retValue, node, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetNodeAttribute(IntPtr node, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetNodeAttribute != null, "pvxSetNodeAttribute not implemented");
					retValue = Delegates.pvxSetNodeAttribute(node, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetNodeAttribute", retValue, node, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseNode(IntPtr[] node)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_node = node)
				{
					Debug.Assert(Delegates.pvxReleaseNode != null, "pvxReleaseNode not implemented");
					retValue = Delegates.pvxReleaseNode(p_node);
					LogCommand("vxReleaseNode", retValue, node					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int RemoveNode(IntPtr[] node)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_node = node)
				{
					Debug.Assert(Delegates.pvxRemoveNode != null, "pvxRemoveNode not implemented");
					retValue = Delegates.pvxRemoveNode(p_node);
					LogCommand("vxRemoveNode", retValue, node					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int AssignNodeCallback(IntPtr node, NodeCompleteCallback callback)
		{
			int retValue;

			Debug.Assert(Delegates.pvxAssignNodeCallback != null, "pvxAssignNodeCallback not implemented");
			retValue = Delegates.pvxAssignNodeCallback(node, callback);
			LogCommand("vxAssignNodeCallback", retValue, node, callback			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static NodeCompleteCallback RetrieveNodeCallback(IntPtr node)
		{
			NodeCompleteCallback retValue;

			Debug.Assert(Delegates.pvxRetrieveNodeCallback != null, "pvxRetrieveNodeCallback not implemented");
			retValue = Delegates.pvxRetrieveNodeCallback(node);
			LogCommand("vxRetrieveNodeCallback", retValue, node			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetNodeTarget(IntPtr node, int target_enum, string target_string)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetNodeTarget != null, "pvxSetNodeTarget not implemented");
			retValue = Delegates.pvxSetNodeTarget(node, target_enum, target_string);
			LogCommand("vxSetNodeTarget", retValue, node, target_enum, target_string			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReplicateNode(IntPtr graph, IntPtr first_node, int[] replicate, uint number_of_parameters)
		{
			int retValue;

			unsafe {
				fixed (int* p_replicate = replicate)
				{
					Debug.Assert(Delegates.pvxReplicateNode != null, "pvxReplicateNode not implemented");
					retValue = Delegates.pvxReplicateNode(graph, first_node, p_replicate, number_of_parameters);
					LogCommand("vxReplicateNode", retValue, graph, first_node, replicate, number_of_parameters					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetParameterByIndex(IntPtr node, uint index)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetParameterByIndex != null, "pvxGetParameterByIndex not implemented");
			retValue = Delegates.pvxGetParameterByIndex(node, index);
			LogCommand("vxGetParameterByIndex", retValue, node, index			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseParameter(IntPtr[] param)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_param = param)
				{
					Debug.Assert(Delegates.pvxReleaseParameter != null, "pvxReleaseParameter not implemented");
					retValue = Delegates.pvxReleaseParameter(p_param);
					LogCommand("vxReleaseParameter", retValue, param					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetParameterByIndex(IntPtr node, uint index, IntPtr value)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetParameterByIndex != null, "pvxSetParameterByIndex not implemented");
			retValue = Delegates.pvxSetParameterByIndex(node, index, value);
			LogCommand("vxSetParameterByIndex", retValue, node, index, value			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetParameterByReference(IntPtr parameter, IntPtr value)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetParameterByReference != null, "pvxSetParameterByReference not implemented");
			retValue = Delegates.pvxSetParameterByReference(parameter, value);
			LogCommand("vxSetParameterByReference", retValue, parameter, value			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryParameter(IntPtr parameter, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryParameter != null, "pvxQueryParameter not implemented");
					retValue = Delegates.pvxQueryParameter(parameter, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryParameter", retValue, parameter, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateScalar(IntPtr context, int data_type, IntPtr ptr)
		{
			IntPtr retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxCreateScalar != null, "pvxCreateScalar not implemented");
					retValue = Delegates.pvxCreateScalar(context, data_type, ptr.ToPointer());
					LogCommand("vxCreateScalar", retValue, context, data_type, ptr					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseScalar(IntPtr[] scalar)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_scalar = scalar)
				{
					Debug.Assert(Delegates.pvxReleaseScalar != null, "pvxReleaseScalar not implemented");
					retValue = Delegates.pvxReleaseScalar(p_scalar);
					LogCommand("vxReleaseScalar", retValue, scalar					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryScalar(IntPtr scalar, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryScalar != null, "pvxQueryScalar not implemented");
					retValue = Delegates.pvxQueryScalar(scalar, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryScalar", retValue, scalar, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int CopyScalar(IntPtr scalar, IntPtr user_ptr, int usage, int user_mem_type)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxCopyScalar != null, "pvxCopyScalar not implemented");
					retValue = Delegates.pvxCopyScalar(scalar, user_ptr.ToPointer(), usage, user_mem_type);
					LogCommand("vxCopyScalar", retValue, scalar, user_ptr, usage, user_mem_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryReference(IntPtr @ref, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryReference != null, "pvxQueryReference not implemented");
					retValue = Delegates.pvxQueryReference(@ref, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryReference", retValue, @ref, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseReference(IntPtr[] ref_ptr)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_ref_ptr = ref_ptr)
				{
					Debug.Assert(Delegates.pvxReleaseReference != null, "pvxReleaseReference not implemented");
					retValue = Delegates.pvxReleaseReference(p_ref_ptr);
					LogCommand("vxReleaseReference", retValue, ref_ptr					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int RetainReference(IntPtr @ref)
		{
			int retValue;

			Debug.Assert(Delegates.pvxRetainReference != null, "pvxRetainReference not implemented");
			retValue = Delegates.pvxRetainReference(@ref);
			LogCommand("vxRetainReference", retValue, @ref			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetReferenceName(IntPtr @ref, string name)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetReferenceName != null, "pvxSetReferenceName not implemented");
			retValue = Delegates.pvxSetReferenceName(@ref, name);
			LogCommand("vxSetReferenceName", retValue, @ref, name			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryDelay(IntPtr delay, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryDelay != null, "pvxQueryDelay not implemented");
					retValue = Delegates.pvxQueryDelay(delay, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryDelay", retValue, delay, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseDelay(IntPtr[] delay)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_delay = delay)
				{
					Debug.Assert(Delegates.pvxReleaseDelay != null, "pvxReleaseDelay not implemented");
					retValue = Delegates.pvxReleaseDelay(p_delay);
					LogCommand("vxReleaseDelay", retValue, delay					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateDelay(IntPtr context, IntPtr exemplar, uint num_slots)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateDelay != null, "pvxCreateDelay not implemented");
			retValue = Delegates.pvxCreateDelay(context, exemplar, num_slots);
			LogCommand("vxCreateDelay", retValue, context, exemplar, num_slots			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetReferenceFromDelay(IntPtr delay, int index)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetReferenceFromDelay != null, "pvxGetReferenceFromDelay not implemented");
			retValue = Delegates.pvxGetReferenceFromDelay(delay, index);
			LogCommand("vxGetReferenceFromDelay", retValue, delay, index			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int AgeDelay(IntPtr delay)
		{
			int retValue;

			Debug.Assert(Delegates.pvxAgeDelay != null, "pvxAgeDelay not implemented");
			retValue = Delegates.pvxAgeDelay(delay);
			LogCommand("vxAgeDelay", retValue, delay			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int RegisterAutoAging(IntPtr graph, IntPtr delay)
		{
			int retValue;

			Debug.Assert(Delegates.pvxRegisterAutoAging != null, "pvxRegisterAutoAging not implemented");
			retValue = Delegates.pvxRegisterAutoAging(graph, delay);
			LogCommand("vxRegisterAutoAging", retValue, graph, delay			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static void AddLogEntry(IntPtr @ref, int status, string message, Int32 vaArgs)
		{
			Debug.Assert(Delegates.pvxAddLogEntry != null, "pvxAddLogEntry not implemented");
			Delegates.pvxAddLogEntry(@ref, status, message, vaArgs);
			LogCommand("vxAddLogEntry", null, @ref, status, message, vaArgs			);
			DebugCheckErrors(null);
		}

		public static void RegisterLogCallback(IntPtr context, LogCallback callback, int reentrant)
		{
			Debug.Assert(Delegates.pvxRegisterLogCallback != null, "pvxRegisterLogCallback not implemented");
			Delegates.pvxRegisterLogCallback(context, callback, reentrant);
			LogCommand("vxRegisterLogCallback", null, context, callback, reentrant			);
			DebugCheckErrors(null);
		}

		public static IntPtr CreateLUT(IntPtr context, int data_type, uint count)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateLUT != null, "pvxCreateLUT not implemented");
			retValue = Delegates.pvxCreateLUT(context, data_type, count);
			LogCommand("vxCreateLUT", retValue, context, data_type, count			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseLUT(IntPtr[] lut)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_lut = lut)
				{
					Debug.Assert(Delegates.pvxReleaseLUT != null, "pvxReleaseLUT not implemented");
					retValue = Delegates.pvxReleaseLUT(p_lut);
					LogCommand("vxReleaseLUT", retValue, lut					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryLUT(IntPtr lut, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryLUT != null, "pvxQueryLUT not implemented");
					retValue = Delegates.pvxQueryLUT(lut, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryLUT", retValue, lut, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int CopyLUT(IntPtr lut, IntPtr user_ptr, int usage, int user_mem_type)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxCopyLUT != null, "pvxCopyLUT not implemented");
					retValue = Delegates.pvxCopyLUT(lut, user_ptr.ToPointer(), usage, user_mem_type);
					LogCommand("vxCopyLUT", retValue, lut, user_ptr, usage, user_mem_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int MapLUT(IntPtr lut, UIntPtr[] map_id, IntPtr[] ptr, int usage, int mem_type, uint flags)
		{
			int retValue;

			unsafe {
				fixed (UIntPtr* p_map_id = map_id)
				fixed (IntPtr* p_ptr = ptr)
				{
					Debug.Assert(Delegates.pvxMapLUT != null, "pvxMapLUT not implemented");
					retValue = Delegates.pvxMapLUT(lut, p_map_id, p_ptr, usage, mem_type, flags);
					LogCommand("vxMapLUT", retValue, lut, map_id, ptr, usage, mem_type, flags					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int UnmapLUT(IntPtr lut, UIntPtr map_id)
		{
			int retValue;

			Debug.Assert(Delegates.pvxUnmapLUT != null, "pvxUnmapLUT not implemented");
			retValue = Delegates.pvxUnmapLUT(lut, map_id);
			LogCommand("vxUnmapLUT", retValue, lut, map_id			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateDistribution(IntPtr context, uint numBins, int offset, uint range)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateDistribution != null, "pvxCreateDistribution not implemented");
			retValue = Delegates.pvxCreateDistribution(context, numBins, offset, range);
			LogCommand("vxCreateDistribution", retValue, context, numBins, offset, range			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseDistribution(IntPtr[] distribution)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_distribution = distribution)
				{
					Debug.Assert(Delegates.pvxReleaseDistribution != null, "pvxReleaseDistribution not implemented");
					retValue = Delegates.pvxReleaseDistribution(p_distribution);
					LogCommand("vxReleaseDistribution", retValue, distribution					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryDistribution(IntPtr distribution, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryDistribution != null, "pvxQueryDistribution not implemented");
					retValue = Delegates.pvxQueryDistribution(distribution, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryDistribution", retValue, distribution, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int CopyDistribution(IntPtr distribution, IntPtr user_ptr, int usage, int user_mem_type)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxCopyDistribution != null, "pvxCopyDistribution not implemented");
					retValue = Delegates.pvxCopyDistribution(distribution, user_ptr.ToPointer(), usage, user_mem_type);
					LogCommand("vxCopyDistribution", retValue, distribution, user_ptr, usage, user_mem_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int MapDistribution(IntPtr distribution, UIntPtr[] map_id, IntPtr[] ptr, int usage, int mem_type, uint flags)
		{
			int retValue;

			unsafe {
				fixed (UIntPtr* p_map_id = map_id)
				fixed (IntPtr* p_ptr = ptr)
				{
					Debug.Assert(Delegates.pvxMapDistribution != null, "pvxMapDistribution not implemented");
					retValue = Delegates.pvxMapDistribution(distribution, p_map_id, p_ptr, usage, mem_type, flags);
					LogCommand("vxMapDistribution", retValue, distribution, map_id, ptr, usage, mem_type, flags					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int UnmapDistribution(IntPtr distribution, UIntPtr map_id)
		{
			int retValue;

			Debug.Assert(Delegates.pvxUnmapDistribution != null, "pvxUnmapDistribution not implemented");
			retValue = Delegates.pvxUnmapDistribution(distribution, map_id);
			LogCommand("vxUnmapDistribution", retValue, distribution, map_id			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateThreshold(IntPtr c, int thresh_type, int data_type)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateThreshold != null, "pvxCreateThreshold not implemented");
			retValue = Delegates.pvxCreateThreshold(c, thresh_type, data_type);
			LogCommand("vxCreateThreshold", retValue, c, thresh_type, data_type			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseThreshold(IntPtr[] thresh)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_thresh = thresh)
				{
					Debug.Assert(Delegates.pvxReleaseThreshold != null, "pvxReleaseThreshold not implemented");
					retValue = Delegates.pvxReleaseThreshold(p_thresh);
					LogCommand("vxReleaseThreshold", retValue, thresh					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetThresholdAttribute(IntPtr thresh, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetThresholdAttribute != null, "pvxSetThresholdAttribute not implemented");
					retValue = Delegates.pvxSetThresholdAttribute(thresh, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetThresholdAttribute", retValue, thresh, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryThreshold(IntPtr thresh, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryThreshold != null, "pvxQueryThreshold not implemented");
					retValue = Delegates.pvxQueryThreshold(thresh, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryThreshold", retValue, thresh, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateMatrix(IntPtr c, int data_type, uint columns, uint rows)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateMatrix != null, "pvxCreateMatrix not implemented");
			retValue = Delegates.pvxCreateMatrix(c, data_type, columns, rows);
			LogCommand("vxCreateMatrix", retValue, c, data_type, columns, rows			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseMatrix(IntPtr[] mat)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_mat = mat)
				{
					Debug.Assert(Delegates.pvxReleaseMatrix != null, "pvxReleaseMatrix not implemented");
					retValue = Delegates.pvxReleaseMatrix(p_mat);
					LogCommand("vxReleaseMatrix", retValue, mat					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryMatrix(IntPtr mat, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryMatrix != null, "pvxQueryMatrix not implemented");
					retValue = Delegates.pvxQueryMatrix(mat, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryMatrix", retValue, mat, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int CopyMatrix(IntPtr matrix, IntPtr user_ptr, int usage, int user_mem_type)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxCopyMatrix != null, "pvxCopyMatrix not implemented");
					retValue = Delegates.pvxCopyMatrix(matrix, user_ptr.ToPointer(), usage, user_mem_type);
					LogCommand("vxCopyMatrix", retValue, matrix, user_ptr, usage, user_mem_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateMatrixFromPattern(IntPtr context, int pattern, uint columns, uint rows)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateMatrixFromPattern != null, "pvxCreateMatrixFromPattern not implemented");
			retValue = Delegates.pvxCreateMatrixFromPattern(context, pattern, columns, rows);
			LogCommand("vxCreateMatrixFromPattern", retValue, context, pattern, columns, rows			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateConvolution(IntPtr context, uint columns, uint rows)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateConvolution != null, "pvxCreateConvolution not implemented");
			retValue = Delegates.pvxCreateConvolution(context, columns, rows);
			LogCommand("vxCreateConvolution", retValue, context, columns, rows			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseConvolution(IntPtr[] conv)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_conv = conv)
				{
					Debug.Assert(Delegates.pvxReleaseConvolution != null, "pvxReleaseConvolution not implemented");
					retValue = Delegates.pvxReleaseConvolution(p_conv);
					LogCommand("vxReleaseConvolution", retValue, conv					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryConvolution(IntPtr conv, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryConvolution != null, "pvxQueryConvolution not implemented");
					retValue = Delegates.pvxQueryConvolution(conv, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryConvolution", retValue, conv, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetConvolutionAttribute(IntPtr conv, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetConvolutionAttribute != null, "pvxSetConvolutionAttribute not implemented");
					retValue = Delegates.pvxSetConvolutionAttribute(conv, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetConvolutionAttribute", retValue, conv, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int CopyConvolutionCoefficients(IntPtr conv, IntPtr user_ptr, int usage, int user_mem_type)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxCopyConvolutionCoefficients != null, "pvxCopyConvolutionCoefficients not implemented");
					retValue = Delegates.pvxCopyConvolutionCoefficients(conv, user_ptr.ToPointer(), usage, user_mem_type);
					LogCommand("vxCopyConvolutionCoefficients", retValue, conv, user_ptr, usage, user_mem_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreatePyramid(IntPtr context, uint levels, float scale, uint width, uint height, uint format)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreatePyramid != null, "pvxCreatePyramid not implemented");
			retValue = Delegates.pvxCreatePyramid(context, levels, scale, width, height, format);
			LogCommand("vxCreatePyramid", retValue, context, levels, scale, width, height, format			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateVirtualPyramid(IntPtr graph, uint levels, float scale, uint width, uint height, uint format)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateVirtualPyramid != null, "pvxCreateVirtualPyramid not implemented");
			retValue = Delegates.pvxCreateVirtualPyramid(graph, levels, scale, width, height, format);
			LogCommand("vxCreateVirtualPyramid", retValue, graph, levels, scale, width, height, format			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleasePyramid(IntPtr[] pyr)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_pyr = pyr)
				{
					Debug.Assert(Delegates.pvxReleasePyramid != null, "pvxReleasePyramid not implemented");
					retValue = Delegates.pvxReleasePyramid(p_pyr);
					LogCommand("vxReleasePyramid", retValue, pyr					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryPyramid(IntPtr pyr, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryPyramid != null, "pvxQueryPyramid not implemented");
					retValue = Delegates.pvxQueryPyramid(pyr, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryPyramid", retValue, pyr, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetPyramidLevel(IntPtr pyr, uint index)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetPyramidLevel != null, "pvxGetPyramidLevel not implemented");
			retValue = Delegates.pvxGetPyramidLevel(pyr, index);
			LogCommand("vxGetPyramidLevel", retValue, pyr, index			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateRemap(IntPtr context, uint src_width, uint src_height, uint dst_width, uint dst_height)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateRemap != null, "pvxCreateRemap not implemented");
			retValue = Delegates.pvxCreateRemap(context, src_width, src_height, dst_width, dst_height);
			LogCommand("vxCreateRemap", retValue, context, src_width, src_height, dst_width, dst_height			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseRemap(IntPtr[] table)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_table = table)
				{
					Debug.Assert(Delegates.pvxReleaseRemap != null, "pvxReleaseRemap not implemented");
					retValue = Delegates.pvxReleaseRemap(p_table);
					LogCommand("vxReleaseRemap", retValue, table					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetRemapPoint(IntPtr table, uint dst_x, uint dst_y, float src_x, float src_y)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetRemapPoint != null, "pvxSetRemapPoint not implemented");
			retValue = Delegates.pvxSetRemapPoint(table, dst_x, dst_y, src_x, src_y);
			LogCommand("vxSetRemapPoint", retValue, table, dst_x, dst_y, src_x, src_y			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int GetRemapPoint(IntPtr table, uint dst_x, uint dst_y, [Out] float[] src_x, [Out] float[] src_y)
		{
			int retValue;

			unsafe {
				fixed (float* p_src_x = src_x)
				fixed (float* p_src_y = src_y)
				{
					Debug.Assert(Delegates.pvxGetRemapPoint != null, "pvxGetRemapPoint not implemented");
					retValue = Delegates.pvxGetRemapPoint(table, dst_x, dst_y, p_src_x, p_src_y);
					LogCommand("vxGetRemapPoint", retValue, table, dst_x, dst_y, src_x, src_y					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryRemap(IntPtr table, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryRemap != null, "pvxQueryRemap not implemented");
					retValue = Delegates.pvxQueryRemap(table, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryRemap", retValue, table, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateArray(IntPtr context, int item_type, uint capacity)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateArray != null, "pvxCreateArray not implemented");
			retValue = Delegates.pvxCreateArray(context, item_type, capacity);
			LogCommand("vxCreateArray", retValue, context, item_type, capacity			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateVirtualArray(IntPtr graph, int item_type, uint capacity)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateVirtualArray != null, "pvxCreateVirtualArray not implemented");
			retValue = Delegates.pvxCreateVirtualArray(graph, item_type, capacity);
			LogCommand("vxCreateVirtualArray", retValue, graph, item_type, capacity			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseArray(IntPtr[] arr)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_arr = arr)
				{
					Debug.Assert(Delegates.pvxReleaseArray != null, "pvxReleaseArray not implemented");
					retValue = Delegates.pvxReleaseArray(p_arr);
					LogCommand("vxReleaseArray", retValue, arr					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryArray(IntPtr arr, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryArray != null, "pvxQueryArray not implemented");
					retValue = Delegates.pvxQueryArray(arr, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryArray", retValue, arr, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int AddArrayItems(IntPtr arr, uint count, IntPtr ptr, uint stride)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxAddArrayItems != null, "pvxAddArrayItems not implemented");
					retValue = Delegates.pvxAddArrayItems(arr, count, ptr.ToPointer(), stride);
					LogCommand("vxAddArrayItems", retValue, arr, count, ptr, stride					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int TruncateArray(IntPtr arr, uint new_num_items)
		{
			int retValue;

			Debug.Assert(Delegates.pvxTruncateArray != null, "pvxTruncateArray not implemented");
			retValue = Delegates.pvxTruncateArray(arr, new_num_items);
			LogCommand("vxTruncateArray", retValue, arr, new_num_items			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int CopyArrayRange(IntPtr array, uint range_start, uint range_end, uint user_stride, IntPtr user_ptr, int usage, int user_mem_type)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxCopyArrayRange != null, "pvxCopyArrayRange not implemented");
					retValue = Delegates.pvxCopyArrayRange(array, range_start, range_end, user_stride, user_ptr.ToPointer(), usage, user_mem_type);
					LogCommand("vxCopyArrayRange", retValue, array, range_start, range_end, user_stride, user_ptr, usage, user_mem_type					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int MapArrayRange(IntPtr array, uint range_start, uint range_end, UIntPtr[] map_id, uint[] stride, IntPtr[] ptr, int usage, int mem_type, uint flags)
		{
			int retValue;

			unsafe {
				fixed (UIntPtr* p_map_id = map_id)
				fixed (uint* p_stride = stride)
				fixed (IntPtr* p_ptr = ptr)
				{
					Debug.Assert(Delegates.pvxMapArrayRange != null, "pvxMapArrayRange not implemented");
					retValue = Delegates.pvxMapArrayRange(array, range_start, range_end, p_map_id, p_stride, p_ptr, usage, mem_type, flags);
					LogCommand("vxMapArrayRange", retValue, array, range_start, range_end, map_id, stride, ptr, usage, mem_type, flags					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int UnmapArrayRange(IntPtr array, UIntPtr map_id)
		{
			int retValue;

			Debug.Assert(Delegates.pvxUnmapArrayRange != null, "pvxUnmapArrayRange not implemented");
			retValue = Delegates.pvxUnmapArrayRange(array, map_id);
			LogCommand("vxUnmapArrayRange", retValue, array, map_id			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateObjectArray(IntPtr context, IntPtr exemplar, uint count)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateObjectArray != null, "pvxCreateObjectArray not implemented");
			retValue = Delegates.pvxCreateObjectArray(context, exemplar, count);
			LogCommand("vxCreateObjectArray", retValue, context, exemplar, count			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr CreateVirtualObjectArray(IntPtr graph, IntPtr exemplar, uint count)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxCreateVirtualObjectArray != null, "pvxCreateVirtualObjectArray not implemented");
			retValue = Delegates.pvxCreateVirtualObjectArray(graph, exemplar, count);
			LogCommand("vxCreateVirtualObjectArray", retValue, graph, exemplar, count			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static IntPtr GetObjectArrayItem(IntPtr arr, uint index)
		{
			IntPtr retValue;

			Debug.Assert(Delegates.pvxGetObjectArrayItem != null, "pvxGetObjectArrayItem not implemented");
			retValue = Delegates.pvxGetObjectArrayItem(arr, index);
			LogCommand("vxGetObjectArrayItem", retValue, arr, index			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int ReleaseObjectArray(IntPtr[] arr)
		{
			int retValue;

			unsafe {
				fixed (IntPtr* p_arr = arr)
				{
					Debug.Assert(Delegates.pvxReleaseObjectArray != null, "pvxReleaseObjectArray not implemented");
					retValue = Delegates.pvxReleaseObjectArray(p_arr);
					LogCommand("vxReleaseObjectArray", retValue, arr					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int QueryObjectArray(IntPtr arr, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxQueryObjectArray != null, "pvxQueryObjectArray not implemented");
					retValue = Delegates.pvxQueryObjectArray(arr, attribute, ptr.ToPointer(), size);
					LogCommand("vxQueryObjectArray", retValue, arr, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetMetaFormatAttribute(IntPtr meta, int attribute, IntPtr ptr, uint size)
		{
			int retValue;

			unsafe {
				{
					Debug.Assert(Delegates.pvxSetMetaFormatAttribute != null, "pvxSetMetaFormatAttribute not implemented");
					retValue = Delegates.pvxSetMetaFormatAttribute(meta, attribute, ptr.ToPointer(), size);
					LogCommand("vxSetMetaFormatAttribute", retValue, meta, attribute, ptr, size					);
				}
			}
			DebugCheckErrors(retValue);

			return (retValue);
		}

		public static int SetMetaFormatFromReference(IntPtr meta, IntPtr exemplar)
		{
			int retValue;

			Debug.Assert(Delegates.pvxSetMetaFormatFromReference != null, "pvxSetMetaFormatFromReference not implemented");
			retValue = Delegates.pvxSetMetaFormatFromReference(meta, exemplar);
			LogCommand("vxSetMetaFormatFromReference", retValue, meta, exemplar			);
			DebugCheckErrors(retValue);

			return (retValue);
		}

		internal unsafe static partial class Delegates
		{
			[SuppressUnmanagedCodeSecurity()]
			internal delegate IntPtr vxCreateContext();

			internal static vxCreateContext pvxCreateContext;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseContext(IntPtr* context);

			internal static vxReleaseContext pvxReleaseContext;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetContext(IntPtr reference);

			internal static vxGetContext pvxGetContext;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryContext(IntPtr context, int attribute, void* ptr, uint size);

			internal static vxQueryContext pvxQueryContext;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetContextAttribute(IntPtr context, int attribute, void* ptr, uint size);

			internal static vxSetContextAttribute pvxSetContextAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxHint(IntPtr reference, int hint, void* data, uint data_size);

			internal static vxHint pvxHint;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxDirective(IntPtr reference, int directive);

			internal static vxDirective pvxDirective;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxGetStatus(IntPtr reference);

			internal static vxGetStatus pvxGetStatus;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxRegisterUserStruct(IntPtr context, uint size);

			internal static vxRegisterUserStruct pvxRegisterUserStruct;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxAllocateUserKernelId(IntPtr context, int* pKernelEnumId);

			internal static vxAllocateUserKernelId pvxAllocateUserKernelId;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxAllocateUserKernelLibraryId(IntPtr context, int* pLibraryId);

			internal static vxAllocateUserKernelLibraryId pvxAllocateUserKernelLibraryId;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetImmediateModeTarget(IntPtr context, int target_enum, string target_string);

			internal static vxSetImmediateModeTarget pvxSetImmediateModeTarget;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateImage(IntPtr context, uint width, uint height, uint color);

			internal static vxCreateImage pvxCreateImage;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateImageFromROI(IntPtr img, Rectangle* rect);

			internal static vxCreateImageFromROI pvxCreateImageFromROI;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateUniformImage(IntPtr context, uint width, uint height, uint color, PixelValue value);

			internal static vxCreateUniformImage pvxCreateUniformImage;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateVirtualImage(IntPtr graph, uint width, uint height, uint color);

			internal static vxCreateVirtualImage pvxCreateVirtualImage;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateImageFromHandle(IntPtr context, uint color, ImagePatchAddressing* addrs, IntPtr* ptrs, int memory_type);

			internal static vxCreateImageFromHandle pvxCreateImageFromHandle;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSwapImageHandle(IntPtr image, IntPtr* new_ptrs, IntPtr* prev_ptrs, uint num_planes);

			internal static vxSwapImageHandle pvxSwapImageHandle;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryImage(IntPtr image, int attribute, void* ptr, uint size);

			internal static vxQueryImage pvxQueryImage;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetImageAttribute(IntPtr image, int attribute, void* ptr, uint size);

			internal static vxSetImageAttribute pvxSetImageAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseImage(IntPtr* image);

			internal static vxReleaseImage pvxReleaseImage;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate uint vxComputeImagePatchSize(IntPtr image, Rectangle* rect, uint plane_index);

			internal static vxComputeImagePatchSize pvxComputeImagePatchSize;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxFormatImagePatchAddress1d(void* ptr, uint index, ImagePatchAddressing* addr);

			internal static vxFormatImagePatchAddress1d pvxFormatImagePatchAddress1d;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxFormatImagePatchAddress2d(void* ptr, uint x, uint y, ImagePatchAddressing* addr);

			internal static vxFormatImagePatchAddress2d pvxFormatImagePatchAddress2d;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxGetValidRegionImage(IntPtr image, Rectangle* rect);

			internal static vxGetValidRegionImage pvxGetValidRegionImage;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxCopyImagePatch(IntPtr image, Rectangle* image_rect, uint image_plane_index, ImagePatchAddressing* user_addr, void* user_ptr, int usage, int user_mem_type);

			internal static vxCopyImagePatch pvxCopyImagePatch;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxMapImagePatch(IntPtr image, Rectangle* rect, uint plane_index, UIntPtr* map_id, ImagePatchAddressing* addr, IntPtr* ptr, int usage, int mem_type, uint flags);

			internal static vxMapImagePatch pvxMapImagePatch;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxUnmapImagePatch(IntPtr image, UIntPtr map_id);

			internal static vxUnmapImagePatch pvxUnmapImagePatch;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateImageFromChannel(IntPtr img, int channel);

			internal static vxCreateImageFromChannel pvxCreateImageFromChannel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetImageValidRectangle(IntPtr image, Rectangle* rect);

			internal static vxSetImageValidRectangle pvxSetImageValidRectangle;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxLoadKernels(IntPtr context, string module);

			internal static vxLoadKernels pvxLoadKernels;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxUnloadKernels(IntPtr context, string module);

			internal static vxUnloadKernels pvxUnloadKernels;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetKernelByName(IntPtr context, string name);

			internal static vxGetKernelByName pvxGetKernelByName;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetKernelByEnum(IntPtr context, int kernel);

			internal static vxGetKernelByEnum pvxGetKernelByEnum;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryKernel(IntPtr kernel, int attribute, void* ptr, uint size);

			internal static vxQueryKernel pvxQueryKernel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseKernel(IntPtr* kernel);

			internal static vxReleaseKernel pvxReleaseKernel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxAddUserKernel(IntPtr context, string name, int enumeration, KernelCallback func_ptr, uint numParams, KernelValidateCallbackCallback validate, KernelInitializeCallback init, KernelDeinitializeCallback deinit);

			internal static vxAddUserKernel pvxAddUserKernel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxFinalizeKernel(IntPtr kernel);

			internal static vxFinalizeKernel pvxFinalizeKernel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxAddParameterToKernel(IntPtr kernel, uint index, int dir, int data_type, int state);

			internal static vxAddParameterToKernel pvxAddParameterToKernel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxRemoveKernel(IntPtr kernel);

			internal static vxRemoveKernel pvxRemoveKernel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetKernelAttribute(IntPtr kernel, int attribute, void* ptr, uint size);

			internal static vxSetKernelAttribute pvxSetKernelAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetKernelParameterByIndex(IntPtr kernel, uint index);

			internal static vxGetKernelParameterByIndex pvxGetKernelParameterByIndex;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateGraph(IntPtr context);

			internal static vxCreateGraph pvxCreateGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseGraph(IntPtr* graph);

			internal static vxReleaseGraph pvxReleaseGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxVerifyGraph(IntPtr graph);

			internal static vxVerifyGraph pvxVerifyGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxProcessGraph(IntPtr graph);

			internal static vxProcessGraph pvxProcessGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxScheduleGraph(IntPtr graph);

			internal static vxScheduleGraph pvxScheduleGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxWaitGraph(IntPtr graph);

			internal static vxWaitGraph pvxWaitGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryGraph(IntPtr graph, int attribute, void* ptr, uint size);

			internal static vxQueryGraph pvxQueryGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetGraphAttribute(IntPtr graph, int attribute, void* ptr, uint size);

			internal static vxSetGraphAttribute pvxSetGraphAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxAddParameterToGraph(IntPtr graph, IntPtr parameter);

			internal static vxAddParameterToGraph pvxAddParameterToGraph;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetGraphParameterByIndex(IntPtr graph, uint index, IntPtr value);

			internal static vxSetGraphParameterByIndex pvxSetGraphParameterByIndex;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetGraphParameterByIndex(IntPtr graph, uint index);

			internal static vxGetGraphParameterByIndex pvxGetGraphParameterByIndex;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxIsGraphVerified(IntPtr graph);

			internal static vxIsGraphVerified pvxIsGraphVerified;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateGenericNode(IntPtr graph, IntPtr kernel);

			internal static vxCreateGenericNode pvxCreateGenericNode;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryNode(IntPtr node, int attribute, void* ptr, uint size);

			internal static vxQueryNode pvxQueryNode;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetNodeAttribute(IntPtr node, int attribute, void* ptr, uint size);

			internal static vxSetNodeAttribute pvxSetNodeAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseNode(IntPtr* node);

			internal static vxReleaseNode pvxReleaseNode;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxRemoveNode(IntPtr* node);

			internal static vxRemoveNode pvxRemoveNode;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxAssignNodeCallback(IntPtr node, NodeCompleteCallback callback);

			internal static vxAssignNodeCallback pvxAssignNodeCallback;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate NodeCompleteCallback vxRetrieveNodeCallback(IntPtr node);

			internal static vxRetrieveNodeCallback pvxRetrieveNodeCallback;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetNodeTarget(IntPtr node, int target_enum, string target_string);

			internal static vxSetNodeTarget pvxSetNodeTarget;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReplicateNode(IntPtr graph, IntPtr first_node, int* replicate, uint number_of_parameters);

			internal static vxReplicateNode pvxReplicateNode;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetParameterByIndex(IntPtr node, uint index);

			internal static vxGetParameterByIndex pvxGetParameterByIndex;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseParameter(IntPtr* param);

			internal static vxReleaseParameter pvxReleaseParameter;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetParameterByIndex(IntPtr node, uint index, IntPtr value);

			internal static vxSetParameterByIndex pvxSetParameterByIndex;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetParameterByReference(IntPtr parameter, IntPtr value);

			internal static vxSetParameterByReference pvxSetParameterByReference;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryParameter(IntPtr parameter, int attribute, void* ptr, uint size);

			internal static vxQueryParameter pvxQueryParameter;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateScalar(IntPtr context, int data_type, void* ptr);

			internal static vxCreateScalar pvxCreateScalar;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseScalar(IntPtr* scalar);

			internal static vxReleaseScalar pvxReleaseScalar;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryScalar(IntPtr scalar, int attribute, void* ptr, uint size);

			internal static vxQueryScalar pvxQueryScalar;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxCopyScalar(IntPtr scalar, void* user_ptr, int usage, int user_mem_type);

			internal static vxCopyScalar pvxCopyScalar;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryReference(IntPtr @ref, int attribute, void* ptr, uint size);

			internal static vxQueryReference pvxQueryReference;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseReference(IntPtr* ref_ptr);

			internal static vxReleaseReference pvxReleaseReference;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxRetainReference(IntPtr @ref);

			internal static vxRetainReference pvxRetainReference;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetReferenceName(IntPtr @ref, string name);

			internal static vxSetReferenceName pvxSetReferenceName;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryDelay(IntPtr delay, int attribute, void* ptr, uint size);

			internal static vxQueryDelay pvxQueryDelay;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseDelay(IntPtr* delay);

			internal static vxReleaseDelay pvxReleaseDelay;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateDelay(IntPtr context, IntPtr exemplar, uint num_slots);

			internal static vxCreateDelay pvxCreateDelay;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetReferenceFromDelay(IntPtr delay, int index);

			internal static vxGetReferenceFromDelay pvxGetReferenceFromDelay;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxAgeDelay(IntPtr delay);

			internal static vxAgeDelay pvxAgeDelay;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxRegisterAutoAging(IntPtr graph, IntPtr delay);

			internal static vxRegisterAutoAging pvxRegisterAutoAging;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate void vxAddLogEntry(IntPtr @ref, int status, string message, Int32 vaArgs);

			internal static vxAddLogEntry pvxAddLogEntry;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate void vxRegisterLogCallback(IntPtr context, LogCallback callback, int reentrant);

			internal static vxRegisterLogCallback pvxRegisterLogCallback;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateLUT(IntPtr context, int data_type, uint count);

			internal static vxCreateLUT pvxCreateLUT;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseLUT(IntPtr* lut);

			internal static vxReleaseLUT pvxReleaseLUT;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryLUT(IntPtr lut, int attribute, void* ptr, uint size);

			internal static vxQueryLUT pvxQueryLUT;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxCopyLUT(IntPtr lut, void* user_ptr, int usage, int user_mem_type);

			internal static vxCopyLUT pvxCopyLUT;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxMapLUT(IntPtr lut, UIntPtr* map_id, IntPtr* ptr, int usage, int mem_type, uint flags);

			internal static vxMapLUT pvxMapLUT;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxUnmapLUT(IntPtr lut, UIntPtr map_id);

			internal static vxUnmapLUT pvxUnmapLUT;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateDistribution(IntPtr context, uint numBins, int offset, uint range);

			internal static vxCreateDistribution pvxCreateDistribution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseDistribution(IntPtr* distribution);

			internal static vxReleaseDistribution pvxReleaseDistribution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryDistribution(IntPtr distribution, int attribute, void* ptr, uint size);

			internal static vxQueryDistribution pvxQueryDistribution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxCopyDistribution(IntPtr distribution, void* user_ptr, int usage, int user_mem_type);

			internal static vxCopyDistribution pvxCopyDistribution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxMapDistribution(IntPtr distribution, UIntPtr* map_id, IntPtr* ptr, int usage, int mem_type, uint flags);

			internal static vxMapDistribution pvxMapDistribution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxUnmapDistribution(IntPtr distribution, UIntPtr map_id);

			internal static vxUnmapDistribution pvxUnmapDistribution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateThreshold(IntPtr c, int thresh_type, int data_type);

			internal static vxCreateThreshold pvxCreateThreshold;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseThreshold(IntPtr* thresh);

			internal static vxReleaseThreshold pvxReleaseThreshold;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetThresholdAttribute(IntPtr thresh, int attribute, void* ptr, uint size);

			internal static vxSetThresholdAttribute pvxSetThresholdAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryThreshold(IntPtr thresh, int attribute, void* ptr, uint size);

			internal static vxQueryThreshold pvxQueryThreshold;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateMatrix(IntPtr c, int data_type, uint columns, uint rows);

			internal static vxCreateMatrix pvxCreateMatrix;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseMatrix(IntPtr* mat);

			internal static vxReleaseMatrix pvxReleaseMatrix;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryMatrix(IntPtr mat, int attribute, void* ptr, uint size);

			internal static vxQueryMatrix pvxQueryMatrix;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxCopyMatrix(IntPtr matrix, void* user_ptr, int usage, int user_mem_type);

			internal static vxCopyMatrix pvxCopyMatrix;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateMatrixFromPattern(IntPtr context, int pattern, uint columns, uint rows);

			internal static vxCreateMatrixFromPattern pvxCreateMatrixFromPattern;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateConvolution(IntPtr context, uint columns, uint rows);

			internal static vxCreateConvolution pvxCreateConvolution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseConvolution(IntPtr* conv);

			internal static vxReleaseConvolution pvxReleaseConvolution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryConvolution(IntPtr conv, int attribute, void* ptr, uint size);

			internal static vxQueryConvolution pvxQueryConvolution;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetConvolutionAttribute(IntPtr conv, int attribute, void* ptr, uint size);

			internal static vxSetConvolutionAttribute pvxSetConvolutionAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxCopyConvolutionCoefficients(IntPtr conv, void* user_ptr, int usage, int user_mem_type);

			internal static vxCopyConvolutionCoefficients pvxCopyConvolutionCoefficients;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreatePyramid(IntPtr context, uint levels, float scale, uint width, uint height, uint format);

			internal static vxCreatePyramid pvxCreatePyramid;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateVirtualPyramid(IntPtr graph, uint levels, float scale, uint width, uint height, uint format);

			internal static vxCreateVirtualPyramid pvxCreateVirtualPyramid;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleasePyramid(IntPtr* pyr);

			internal static vxReleasePyramid pvxReleasePyramid;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryPyramid(IntPtr pyr, int attribute, void* ptr, uint size);

			internal static vxQueryPyramid pvxQueryPyramid;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetPyramidLevel(IntPtr pyr, uint index);

			internal static vxGetPyramidLevel pvxGetPyramidLevel;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateRemap(IntPtr context, uint src_width, uint src_height, uint dst_width, uint dst_height);

			internal static vxCreateRemap pvxCreateRemap;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseRemap(IntPtr* table);

			internal static vxReleaseRemap pvxReleaseRemap;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetRemapPoint(IntPtr table, uint dst_x, uint dst_y, float src_x, float src_y);

			internal static vxSetRemapPoint pvxSetRemapPoint;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxGetRemapPoint(IntPtr table, uint dst_x, uint dst_y, float* src_x, float* src_y);

			internal static vxGetRemapPoint pvxGetRemapPoint;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryRemap(IntPtr table, int attribute, void* ptr, uint size);

			internal static vxQueryRemap pvxQueryRemap;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateArray(IntPtr context, int item_type, uint capacity);

			internal static vxCreateArray pvxCreateArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateVirtualArray(IntPtr graph, int item_type, uint capacity);

			internal static vxCreateVirtualArray pvxCreateVirtualArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseArray(IntPtr* arr);

			internal static vxReleaseArray pvxReleaseArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryArray(IntPtr arr, int attribute, void* ptr, uint size);

			internal static vxQueryArray pvxQueryArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxAddArrayItems(IntPtr arr, uint count, void* ptr, uint stride);

			internal static vxAddArrayItems pvxAddArrayItems;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxTruncateArray(IntPtr arr, uint new_num_items);

			internal static vxTruncateArray pvxTruncateArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxCopyArrayRange(IntPtr array, uint range_start, uint range_end, uint user_stride, void* user_ptr, int usage, int user_mem_type);

			internal static vxCopyArrayRange pvxCopyArrayRange;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxMapArrayRange(IntPtr array, uint range_start, uint range_end, UIntPtr* map_id, uint* stride, IntPtr* ptr, int usage, int mem_type, uint flags);

			internal static vxMapArrayRange pvxMapArrayRange;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxUnmapArrayRange(IntPtr array, UIntPtr map_id);

			internal static vxUnmapArrayRange pvxUnmapArrayRange;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateObjectArray(IntPtr context, IntPtr exemplar, uint count);

			internal static vxCreateObjectArray pvxCreateObjectArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxCreateVirtualObjectArray(IntPtr graph, IntPtr exemplar, uint count);

			internal static vxCreateVirtualObjectArray pvxCreateVirtualObjectArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate IntPtr vxGetObjectArrayItem(IntPtr arr, uint index);

			internal static vxGetObjectArrayItem pvxGetObjectArrayItem;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxReleaseObjectArray(IntPtr* arr);

			internal static vxReleaseObjectArray pvxReleaseObjectArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxQueryObjectArray(IntPtr arr, int attribute, void* ptr, uint size);

			internal static vxQueryObjectArray pvxQueryObjectArray;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetMetaFormatAttribute(IntPtr meta, int attribute, void* ptr, uint size);

			internal static vxSetMetaFormatAttribute pvxSetMetaFormatAttribute;

			[SuppressUnmanagedCodeSecurity()]
			internal unsafe delegate int vxSetMetaFormatFromReference(IntPtr meta, IntPtr exemplar);

			internal static vxSetMetaFormatFromReference pvxSetMetaFormatFromReference;

		}
	}

}
