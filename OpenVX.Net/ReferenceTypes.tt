<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Runtime.InteropServices" #>

// Copyright (C) 2017 Luca Piccioni
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#pragma warning disable 649

using System;

namespace OpenVX
{
<#
	string[] underlyingTypes =	new[] {
		"Array",
		"Context",
		"Convolution",
		"Delay",
		"Distribution",
		"Graph",
		"Kernel",
		"Image",
		"Import",
		"Lut",
		"MapId",
		"Matrix",
		"MetaFormat",
		"Node",
		"ObjectArray",
		"Parameter",
		"Pyramid",
		"Remap",
		"Scalar",
		"Tensor",
		"Threshold"
	};

	for (int i = 0; i < underlyingTypes.Length; i++) {
		string underlyingType = underlyingTypes[i];
#>
	/// <summary>
	/// OpenVX object.
	/// </summary>
	public struct <#= underlyingType #>
	{
		/// <summary>
		/// Construct a <#= underlyingType #> from a raw handle.
		/// </summary>
		/// <param name="context">
		/// The <see cref="IntPtr"/> to be converted to <#= underlyingType #>.
		/// </param>
		internal <#= underlyingType #>(IntPtr reference)
		{
			_Reference = reference;
		}

		/// <summary>
		/// Reference handle.
		/// </summary>
		private IntPtr _Reference;

		/// <summary>
		/// Implicit cast to <see cref="Reference"/>.
		/// </summary>
		/// <param name="context">
		/// The <see cref="<#= underlyingType #>"/> to be converted to <see cref="Reference"/>.
		/// </param>
		public static implicit operator Reference(<#= underlyingType #> obj) { return (new Reference(obj._Reference)); }

		/// <summary>
		/// Implicit cast to <see cref="<#= underlyingType #>"/> from <see cref="Reference"/>.
		/// </summary>
		/// <param name="context">
		/// The <see cref="<#= underlyingType #>"/> to be converted to <see cref="Reference"/>.
		/// </param>
		public static implicit operator <#= underlyingType #>(Reference obj) { return (new <#= underlyingType #>(obj._Reference)); }
	}

<#
}
#>
}